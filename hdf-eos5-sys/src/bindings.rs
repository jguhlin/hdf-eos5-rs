/* automatically generated by rust-bindgen 0.70.1 */

pub const H5_DEFAULT_PLUGINDIR: &[u8; 27] = b"/usr/local/hdf5/lib/plugin\0";
pub const H5_DEV_T_IS_SCALAR: u32 = 1;
pub const H5_HAVE_ALARM: u32 = 1;
pub const H5_HAVE_ASPRINTF: u32 = 1;
pub const H5_HAVE_ATTRIBUTE: u32 = 1;
pub const H5_HAVE_C99_DESIGNATED_INITIALIZER: u32 = 1;
pub const H5_HAVE_C99_FUNC: u32 = 1;
pub const H5_HAVE_ARPA_INET_H: u32 = 1;
pub const H5_HAVE_CLOCK_GETTIME: u32 = 1;
pub const H5_HAVE_DIFFTIME: u32 = 1;
pub const H5_HAVE_DIRENT_H: u32 = 1;
pub const H5_HAVE_DLFCN_H: u32 = 1;
pub const H5_HAVE_EMBEDDED_LIBINFO: u32 = 1;
pub const H5_HAVE_FCNTL: u32 = 1;
pub const H5_HAVE_FEATURES_H: u32 = 1;
pub const H5_HAVE_FLOAT128: u32 = 1;
pub const H5_HAVE_FLOCK: u32 = 1;
pub const H5_HAVE_FORK: u32 = 1;
pub const H5_HAVE_FREXPF: u32 = 1;
pub const H5_HAVE_FREXPL: u32 = 1;
pub const H5_HAVE_FSEEKO: u32 = 1;
pub const H5_HAVE_FUNCTION: u32 = 1;
pub const H5_HAVE_GETHOSTNAME: u32 = 1;
pub const H5_HAVE_GETPWUID: u32 = 1;
pub const H5_HAVE_GETRUSAGE: u32 = 1;
pub const H5_HAVE_GETTIMEOFDAY: u32 = 1;
pub const H5_HAVE_INLINE: u32 = 1;
pub const H5_HAVE_INTTYPES_H: u32 = 1;
pub const H5_HAVE_IOCTL: u32 = 1;
pub const H5_HAVE_LIBDL: u32 = 1;
pub const H5_HAVE_LIBM: u32 = 1;
pub const H5_HAVE_LONGJMP: u32 = 1;
pub const H5_HAVE_LSEEK64: u32 = 1;
pub const H5_HAVE_LSTAT: u32 = 1;
pub const H5_HAVE_MEMORY_H: u32 = 1;
pub const H5_HAVE_NETDB_H: u32 = 1;
pub const H5_HAVE_NETINET_IN_H: u32 = 1;
pub const H5_HAVE_PREADWRITE: u32 = 1;
pub const H5_HAVE_PTHREAD_H: u32 = 1;
pub const H5_HAVE_QUADMATH_H: u32 = 1;
pub const H5_HAVE_RANDOM: u32 = 1;
pub const H5_HAVE_RAND_R: u32 = 1;
pub const H5_HAVE_SETJMP: u32 = 1;
pub const H5_HAVE_SETJMP_H: u32 = 1;
pub const H5_HAVE_SIGLONGJMP: u32 = 1;
pub const H5_HAVE_SIGNAL: u32 = 1;
pub const H5_HAVE_SIGPROCMASK: u32 = 1;
pub const H5_HAVE_SIGSETJMP: u32 = 1;
pub const H5_HAVE_SNPRINTF: u32 = 1;
pub const H5_HAVE_SRANDOM: u32 = 1;
pub const H5_HAVE_STAT64: u32 = 1;
pub const H5_HAVE_STAT_ST_BLOCKS: u32 = 1;
pub const H5_HAVE_STDBOOL_H: u32 = 1;
pub const H5_HAVE_STDDEF_H: u32 = 1;
pub const H5_HAVE_STDINT_H: u32 = 1;
pub const H5_HAVE_STDLIB_H: u32 = 1;
pub const H5_HAVE_STRDUP: u32 = 1;
pub const H5_HAVE_STRINGS_H: u32 = 1;
pub const H5_HAVE_STRING_H: u32 = 1;
pub const H5_HAVE_STRTOLL: u32 = 1;
pub const H5_HAVE_STRTOULL: u32 = 1;
pub const H5_HAVE_SYMLINK: u32 = 1;
pub const H5_HAVE_SYSTEM: u32 = 1;
pub const H5_HAVE_SYS_FILE_H: u32 = 1;
pub const H5_HAVE_SYS_IOCTL_H: u32 = 1;
pub const H5_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const H5_HAVE_SYS_SOCKET_H: u32 = 1;
pub const H5_HAVE_SYS_STAT_H: u32 = 1;
pub const H5_HAVE_SYS_TIME_H: u32 = 1;
pub const H5_HAVE_SYS_TYPES_H: u32 = 1;
pub const H5_HAVE_TIMEZONE: u32 = 1;
pub const H5_HAVE_TIOCGETD: u32 = 1;
pub const H5_HAVE_TIOCGWINSZ: u32 = 1;
pub const H5_HAVE_TMPFILE: u32 = 1;
pub const H5_HAVE_TM_GMTOFF: u32 = 1;
pub const H5_HAVE_UNISTD_H: u32 = 1;
pub const H5_HAVE_VASPRINTF: u32 = 1;
pub const H5_HAVE_VSNPRINTF: u32 = 1;
pub const H5_HAVE_WAITPID: u32 = 1;
pub const H5_HAVE___INLINE: u32 = 1;
pub const H5_HAVE___INLINE__: u32 = 1;
pub const H5_IGNORE_DISABLED_FILE_LOCKS: u32 = 1;
pub const H5_INCLUDE_HL: u32 = 1;
pub const H5_LDOUBLE_TO_LLONG_ACCURATE: u32 = 1;
pub const H5_LLONG_TO_LDOUBLE_CORRECT: u32 = 1;
pub const H5_NO_ALIGNMENT_RESTRICTIONS: u32 = 1;
pub const H5_PACKAGE: &[u8; 5] = b"hdf5\0";
pub const H5_PACKAGE_BUGREPORT: &[u8; 18] = b"help@hdfgroup.org\0";
pub const H5_PACKAGE_NAME: &[u8; 5] = b"HDF5\0";
pub const H5_PACKAGE_STRING: &[u8; 12] = b"HDF5 1.10.7\0";
pub const H5_PACKAGE_TARNAME: &[u8; 5] = b"hdf5\0";
pub const H5_PACKAGE_URL: &[u8; 24] = b"http://www.hdfgroup.org\0";
pub const H5_PACKAGE_VERSION: &[u8; 7] = b"1.10.7\0";
pub const H5_PRINTF_LL_WIDTH: &[u8; 2] = b"l\0";
pub const H5_SIZEOF_BOOL: u32 = 1;
pub const H5_SIZEOF_CHAR: u32 = 1;
pub const H5_SIZEOF_DOUBLE: u32 = 8;
pub const H5_SIZEOF_FLOAT: u32 = 4;
pub const H5_SIZEOF_INT: u32 = 4;
pub const H5_SIZEOF_INT16_T: u32 = 2;
pub const H5_SIZEOF_INT32_T: u32 = 4;
pub const H5_SIZEOF_INT64_T: u32 = 8;
pub const H5_SIZEOF_INT8_T: u32 = 1;
pub const H5_SIZEOF_INT_FAST16_T: u32 = 8;
pub const H5_SIZEOF_INT_FAST32_T: u32 = 8;
pub const H5_SIZEOF_INT_FAST64_T: u32 = 8;
pub const H5_SIZEOF_INT_FAST8_T: u32 = 1;
pub const H5_SIZEOF_INT_LEAST16_T: u32 = 2;
pub const H5_SIZEOF_INT_LEAST32_T: u32 = 4;
pub const H5_SIZEOF_INT_LEAST64_T: u32 = 8;
pub const H5_SIZEOF_INT_LEAST8_T: u32 = 1;
pub const H5_SIZEOF_SIZE_T: u32 = 8;
pub const H5_SIZEOF_SSIZE_T: u32 = 8;
pub const H5_SIZEOF_LONG: u32 = 8;
pub const H5_SIZEOF_LONG_DOUBLE: u32 = 16;
pub const H5_SIZEOF_LONG_LONG: u32 = 8;
pub const H5_SIZEOF_OFF64_T: u32 = 8;
pub const H5_SIZEOF_OFF_T: u32 = 8;
pub const H5_SIZEOF_PTRDIFF_T: u32 = 8;
pub const H5_SIZEOF_SHORT: u32 = 2;
pub const H5_SIZEOF_TIME_T: u32 = 8;
pub const H5_SIZEOF_UINT16_T: u32 = 2;
pub const H5_SIZEOF_UINT32_T: u32 = 4;
pub const H5_SIZEOF_UINT64_T: u32 = 8;
pub const H5_SIZEOF_UINT8_T: u32 = 1;
pub const H5_SIZEOF_UINT_FAST16_T: u32 = 8;
pub const H5_SIZEOF_UINT_FAST32_T: u32 = 8;
pub const H5_SIZEOF_UINT_FAST64_T: u32 = 8;
pub const H5_SIZEOF_UINT_FAST8_T: u32 = 1;
pub const H5_SIZEOF_UINT_LEAST16_T: u32 = 2;
pub const H5_SIZEOF_UINT_LEAST32_T: u32 = 4;
pub const H5_SIZEOF_UINT_LEAST64_T: u32 = 8;
pub const H5_SIZEOF_UINT_LEAST8_T: u32 = 1;
pub const H5_SIZEOF_UNSIGNED: u32 = 4;
pub const H5_SIZEOF___FLOAT128: u32 = 16;
pub const H5_SIZEOF___INT64: u32 = 0;
pub const H5_STDC_HEADERS: u32 = 1;
pub const H5_SYSTEM_SCOPE_THREADS: u32 = 1;
pub const H5_TIME_WITH_SYS_TIME: u32 = 1;
pub const H5_USE_110_API_DEFAULT: u32 = 1;
pub const H5_USE_FILE_LOCKING: u32 = 1;
pub const H5_VERSION: &[u8; 7] = b"1.10.7\0";
pub const H5_WANT_DATA_ACCURACY: u32 = 1;
pub const H5_WANT_DCONV_EXCEPTION: u32 = 1;
pub const H5Acreate_vers: u32 = 2;
pub const H5Aiterate_vers: u32 = 2;
pub const H5Dcreate_vers: u32 = 2;
pub const H5Dopen_vers: u32 = 2;
pub const H5Eclear_vers: u32 = 2;
pub const H5Eget_auto_vers: u32 = 2;
pub const H5Eprint_vers: u32 = 2;
pub const H5Epush_vers: u32 = 2;
pub const H5Eset_auto_vers: u32 = 2;
pub const H5Ewalk_vers: u32 = 2;
pub const H5Fget_info_vers: u32 = 2;
pub const H5Gcreate_vers: u32 = 2;
pub const H5Gopen_vers: u32 = 2;
pub const H5Pget_filter_vers: u32 = 2;
pub const H5Pget_filter_by_id_vers: u32 = 2;
pub const H5Pinsert_vers: u32 = 2;
pub const H5Pregister_vers: u32 = 2;
pub const H5Rdereference_vers: u32 = 2;
pub const H5Rget_obj_type_vers: u32 = 2;
pub const H5Tarray_create_vers: u32 = 2;
pub const H5Tcommit_vers: u32 = 2;
pub const H5Tget_array_dims_vers: u32 = 2;
pub const H5Topen_vers: u32 = 2;
pub const H5E_auto_t_vers: u32 = 2;
pub const H5Z_class_t_vers: u32 = 2;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const H5_VERS_MAJOR: u32 = 1;
pub const H5_VERS_MINOR: u32 = 10;
pub const H5_VERS_RELEASE: u32 = 7;
pub const H5_VERS_SUBRELEASE: &[u8; 1] = b"\0";
pub const H5_VERS_INFO: &[u8; 29] = b"HDF5 library version: 1.10.7\0";
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const H5_SIZEOF_HSIZE_T: u32 = 8;
pub const H5_SIZEOF_HSSIZE_T: u32 = 8;
pub const H5_SIZEOF_HADDR_T: u32 = 8;
pub const H5_PRINTF_HADDR_FMT: &[u8; 4] = b"%lu\0";
pub const H5_ITER_ERROR: i32 = -1;
pub const H5_ITER_CONT: u32 = 0;
pub const H5_ITER_STOP: u32 = 1;
pub const H5_SIZEOF_HID_T: u32 = 8;
pub const H5I_INVALID_HID: i32 = -1;
pub const H5T_OPAQUE_TAG_MAX: u32 = 256;
pub const H5L_LINK_CLASS_T_VERS: u32 = 1;
pub const H5L_LINK_CLASS_T_VERS_0: u32 = 0;
pub const H5O_COPY_SHALLOW_HIERARCHY_FLAG: u32 = 1;
pub const H5O_COPY_EXPAND_SOFT_LINK_FLAG: u32 = 2;
pub const H5O_COPY_EXPAND_EXT_LINK_FLAG: u32 = 4;
pub const H5O_COPY_EXPAND_REFERENCE_FLAG: u32 = 8;
pub const H5O_COPY_WITHOUT_ATTR_FLAG: u32 = 16;
pub const H5O_COPY_PRESERVE_NULL_FLAG: u32 = 32;
pub const H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG: u32 = 64;
pub const H5O_COPY_ALL: u32 = 127;
pub const H5O_SHMESG_NONE_FLAG: u32 = 0;
pub const H5O_HDR_CHUNK0_SIZE: u32 = 3;
pub const H5O_HDR_ATTR_CRT_ORDER_TRACKED: u32 = 4;
pub const H5O_HDR_ATTR_CRT_ORDER_INDEXED: u32 = 8;
pub const H5O_HDR_ATTR_STORE_PHASE_CHANGE: u32 = 16;
pub const H5O_HDR_STORE_TIMES: u32 = 32;
pub const H5O_HDR_ALL_FLAGS: u32 = 63;
pub const H5O_SHMESG_MAX_NINDEXES: u32 = 8;
pub const H5O_SHMESG_MAX_LIST_SIZE: u32 = 5000;
pub const H5O_INFO_BASIC: u32 = 1;
pub const H5O_INFO_TIME: u32 = 2;
pub const H5O_INFO_NUM_ATTRS: u32 = 4;
pub const H5O_INFO_HDR: u32 = 8;
pub const H5O_INFO_META_SIZE: u32 = 16;
pub const H5O_INFO_ALL: u32 = 31;
pub const H5AC__CURR_CACHE_CONFIG_VERSION: u32 = 1;
pub const H5AC__MAX_TRACE_FILE_NAME_LEN: u32 = 1024;
pub const H5AC_METADATA_WRITE_STRATEGY__PROCESS_0_ONLY: u32 = 0;
pub const H5AC_METADATA_WRITE_STRATEGY__DISTRIBUTED: u32 = 1;
pub const H5AC__CURR_CACHE_IMAGE_CONFIG_VERSION: u32 = 1;
pub const H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE: i32 = -1;
pub const H5AC__CACHE_IMAGE__ENTRY_AGEOUT__MAX: u32 = 100;
pub const H5D_CHUNK_CACHE_W0_DEFAULT: f64 = -1.0;
pub const H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS: u32 = 2;
pub const H5D_XFER_DIRECT_CHUNK_WRITE_FLAG_NAME: &[u8; 18] = b"direct_chunk_flag\0";
pub const H5D_XFER_DIRECT_CHUNK_WRITE_FILTERS_NAME: &[u8; 21] = b"direct_chunk_filters\0";
pub const H5D_XFER_DIRECT_CHUNK_WRITE_OFFSET_NAME: &[u8; 20] = b"direct_chunk_offset\0";
pub const H5D_XFER_DIRECT_CHUNK_WRITE_DATASIZE_NAME: &[u8; 22] = b"direct_chunk_datasize\0";
pub const H5D_XFER_DIRECT_CHUNK_READ_FLAG_NAME: &[u8; 23] = b"direct_chunk_read_flag\0";
pub const H5D_XFER_DIRECT_CHUNK_READ_OFFSET_NAME: &[u8; 25] = b"direct_chunk_read_offset\0";
pub const H5D_XFER_DIRECT_CHUNK_READ_FILTERS_NAME: &[u8; 26] = b"direct_chunk_read_filters\0";
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const H5F_OBJ_FILE: u32 = 1;
pub const H5F_OBJ_DATASET: u32 = 2;
pub const H5F_OBJ_GROUP: u32 = 4;
pub const H5F_OBJ_DATATYPE: u32 = 8;
pub const H5F_OBJ_ATTR: u32 = 16;
pub const H5F_OBJ_ALL: u32 = 31;
pub const H5F_OBJ_LOCAL: u32 = 32;
pub const H5F_NUM_METADATA_READ_RETRY_TYPES: u32 = 21;
pub const H5_HAVE_VFL: u32 = 1;
pub const H5FD_VFD_DEFAULT: u32 = 0;
pub const H5FD_FEAT_AGGREGATE_METADATA: u32 = 1;
pub const H5FD_FEAT_ACCUMULATE_METADATA_WRITE: u32 = 2;
pub const H5FD_FEAT_ACCUMULATE_METADATA_READ: u32 = 4;
pub const H5FD_FEAT_ACCUMULATE_METADATA: u32 = 6;
pub const H5FD_FEAT_DATA_SIEVE: u32 = 8;
pub const H5FD_FEAT_AGGREGATE_SMALLDATA: u32 = 16;
pub const H5FD_FEAT_IGNORE_DRVRINFO: u32 = 32;
pub const H5FD_FEAT_DIRTY_DRVRINFO_LOAD: u32 = 64;
pub const H5FD_FEAT_POSIX_COMPAT_HANDLE: u32 = 128;
pub const H5FD_FEAT_HAS_MPI: u32 = 256;
pub const H5FD_FEAT_ALLOCATE_EARLY: u32 = 512;
pub const H5FD_FEAT_ALLOW_FILE_IMAGE: u32 = 1024;
pub const H5FD_FEAT_CAN_USE_FILE_IMAGE_CALLBACKS: u32 = 2048;
pub const H5FD_FEAT_SUPPORTS_SWMR_IO: u32 = 4096;
pub const H5FD_FEAT_USE_ALLOC_SIZE: u32 = 8192;
pub const H5FD_FEAT_PAGED_AGGR: u32 = 16384;
pub const H5FD_FEAT_DEFAULT_VFD_COMPATIBLE: u32 = 32768;
pub const H5G_NTYPES: u32 = 256;
pub const H5G_NLIBTYPES: u32 = 8;
pub const H5G_NUSERTYPES: u32 = 248;
pub const H5Z_FILTER_ERROR: i32 = -1;
pub const H5Z_FILTER_NONE: u32 = 0;
pub const H5Z_FILTER_DEFLATE: u32 = 1;
pub const H5Z_FILTER_SHUFFLE: u32 = 2;
pub const H5Z_FILTER_FLETCHER32: u32 = 3;
pub const H5Z_FILTER_SZIP: u32 = 4;
pub const H5Z_FILTER_NBIT: u32 = 5;
pub const H5Z_FILTER_SCALEOFFSET: u32 = 6;
pub const H5Z_FILTER_RESERVED: u32 = 256;
pub const H5Z_FILTER_MAX: u32 = 65535;
pub const H5Z_FILTER_ALL: u32 = 0;
pub const H5Z_MAX_NFILTERS: u32 = 32;
pub const H5Z_FLAG_DEFMASK: u32 = 255;
pub const H5Z_FLAG_MANDATORY: u32 = 0;
pub const H5Z_FLAG_OPTIONAL: u32 = 1;
pub const H5Z_FLAG_INVMASK: u32 = 65280;
pub const H5Z_FLAG_REVERSE: u32 = 256;
pub const H5Z_FLAG_SKIP_EDC: u32 = 512;
pub const H5_SZIP_ALLOW_K13_OPTION_MASK: u32 = 1;
pub const H5_SZIP_CHIP_OPTION_MASK: u32 = 2;
pub const H5_SZIP_EC_OPTION_MASK: u32 = 4;
pub const H5_SZIP_NN_OPTION_MASK: u32 = 32;
pub const H5_SZIP_MAX_PIXELS_PER_BLOCK: u32 = 32;
pub const H5Z_SHUFFLE_USER_NPARMS: u32 = 0;
pub const H5Z_SHUFFLE_TOTAL_NPARMS: u32 = 1;
pub const H5Z_SZIP_USER_NPARMS: u32 = 2;
pub const H5Z_SZIP_TOTAL_NPARMS: u32 = 4;
pub const H5Z_SZIP_PARM_MASK: u32 = 0;
pub const H5Z_SZIP_PARM_PPB: u32 = 1;
pub const H5Z_SZIP_PARM_BPP: u32 = 2;
pub const H5Z_SZIP_PARM_PPS: u32 = 3;
pub const H5Z_NBIT_USER_NPARMS: u32 = 0;
pub const H5Z_SCALEOFFSET_USER_NPARMS: u32 = 2;
pub const H5Z_SO_INT_MINBITS_DEFAULT: u32 = 0;
pub const H5Z_CLASS_T_VERS: u32 = 1;
pub const H5Z_FILTER_CONFIG_ENCODE_ENABLED: u32 = 1;
pub const H5Z_FILTER_CONFIG_DECODE_ENABLED: u32 = 2;
pub const H5P_CRT_ORDER_TRACKED: u32 = 1;
pub const H5P_CRT_ORDER_INDEXED: u32 = 2;
pub const H5PL_NO_PLUGIN: &[u8; 3] = b"::\0";
pub const H5PL_FILTER_PLUGIN: u32 = 1;
pub const H5PL_ALL_PLUGIN: u32 = 65535;
pub const H5S_MAX_RANK: u32 = 32;
pub const H5FD_DIRECT: i32 = -1;
pub const H5FD_HDFS: i32 = -1;
pub const H5FD__CURR_HDFS_FAPL_T_VERSION: u32 = 1;
pub const H5FD__HDFS_NODE_NAME_SPACE: u32 = 128;
pub const H5FD__HDFS_USER_NAME_SPACE: u32 = 128;
pub const H5FD__HDFS_KERB_CACHE_PATH_SPACE: u32 = 128;
pub const H5FD_LOG_TRUNCATE: u32 = 1;
pub const H5FD_LOG_META_IO: u32 = 1;
pub const H5FD_LOG_LOC_READ: u32 = 2;
pub const H5FD_LOG_LOC_WRITE: u32 = 4;
pub const H5FD_LOG_LOC_SEEK: u32 = 8;
pub const H5FD_LOG_LOC_IO: u32 = 14;
pub const H5FD_LOG_FILE_READ: u32 = 16;
pub const H5FD_LOG_FILE_WRITE: u32 = 32;
pub const H5FD_LOG_FILE_IO: u32 = 48;
pub const H5FD_LOG_FLAVOR: u32 = 64;
pub const H5FD_LOG_NUM_READ: u32 = 128;
pub const H5FD_LOG_NUM_WRITE: u32 = 256;
pub const H5FD_LOG_NUM_SEEK: u32 = 512;
pub const H5FD_LOG_NUM_TRUNCATE: u32 = 1024;
pub const H5FD_LOG_NUM_IO: u32 = 1920;
pub const H5FD_LOG_TIME_OPEN: u32 = 2048;
pub const H5FD_LOG_TIME_STAT: u32 = 4096;
pub const H5FD_LOG_TIME_READ: u32 = 8192;
pub const H5FD_LOG_TIME_WRITE: u32 = 16384;
pub const H5FD_LOG_TIME_SEEK: u32 = 32768;
pub const H5FD_LOG_TIME_TRUNCATE: u32 = 65536;
pub const H5FD_LOG_TIME_CLOSE: u32 = 131072;
pub const H5FD_LOG_TIME_IO: u32 = 260096;
pub const H5FD_LOG_ALLOC: u32 = 262144;
pub const H5FD_LOG_FREE: u32 = 524288;
pub const H5FD_LOG_ALL: u32 = 1048575;
pub const H5D_ONE_LINK_CHUNK_IO_THRESHOLD: u32 = 0;
pub const H5D_MULTI_CHUNK_IO_COL_THRESHOLD: u32 = 60;
pub const H5FD_MPIO: i32 = -1;
pub const H5FD_ROS3: i32 = -1;
pub const H5FD_CURR_SPLITTER_VFD_CONFIG_VERSION: u32 = 1;
pub const H5FD_SPLITTER_PATH_MAX: u32 = 4096;
pub const H5FD_SPLITTER_MAGIC: u32 = 730949760;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const HE5_HDFEOSVERSION: &[u8; 5] = b"1.17\0";
pub const H5_USE_16_API: u32 = 1;
pub const FALSE: u32 = 0;
pub const SUCCEED: u32 = 0;
pub const FAIL: i32 = -1;
pub const HE5_DTSETRANKMAX: u32 = 8;
pub const HE5_FLDNUMBERMAX: u32 = 500;
pub const HE5_OBJNAMELENMAX: u32 = 256;
pub const HE5_BLKSIZE: u32 = 640000;
pub const HE5_CHUNKSIZE: u32 = 1000;
pub const HE5_DIMNUMBERMAX: u32 = 500;
pub const HE5_ATTRNUMBERMAX: u32 = 100;
pub const HE5_HDFE_TYPESTRSIZE: u32 = 80;
pub const HE5_HDFE_DIMBUFSIZE: u32 = 256;
pub const HE5_HDFE_NAMBUFSIZE: u32 = 256;
pub const HE5_HDFE_ERRBUFSIZE: u32 = 256;
pub const HE5_HDFE_UTLBUFSIZE: u32 = 1024;
pub const HDF4_ACC_RDONLY: u32 = 1;
pub const HDF5_ACC_RDONLY: u32 = 11;
pub const HDF4_ACC_RDWR: u32 = 3;
pub const HDF5_ACC_RDWR: u32 = 13;
pub const HDF4_ACC_CREATE: u32 = 4;
pub const HDF5_ACC_CREATE: u32 = 14;
pub const HE5F_ACC_RDWR: u32 = 100;
pub const HE5F_ACC_RDONLY: u32 = 101;
pub const HE5F_ACC_TRUNC: u32 = 102;
pub const HE5_HDFE_NOMERGE: u32 = 0;
pub const HE5_HDFE_AUTOMERGE: u32 = 1;
pub const HE5_HDFE_NENTDIM: u32 = 0;
pub const HE5_HDFE_NENTMAP: u32 = 1;
pub const HE5_HDFE_NENTIMAP: u32 = 2;
pub const HE5_HDFE_NENTGFLD: u32 = 3;
pub const HE5_HDFE_NENTDFLD: u32 = 4;
pub const HE5_HDFE_RAD_DEG: u32 = 0;
pub const HE5_HDFE_DEG_RAD: u32 = 1;
pub const HE5_HDFE_DMS_DEG: u32 = 2;
pub const HE5_HDFE_DEG_DMS: u32 = 3;
pub const HE5_HDFE_RAD_DMS: u32 = 4;
pub const HE5_HDFE_DMS_RAD: u32 = 5;
pub const HE5_HDFE_MIDPOINT: u32 = 0;
pub const HE5_HDFE_ENDPOINT: u32 = 1;
pub const HE5_HDFE_ANYPOINT: u32 = 2;
pub const HE5_HDFE_INTERNAL: u32 = 0;
pub const HE5_HDFE_EXTERNAL: u32 = 1;
pub const HE5_HDFE_NOPREVSUB: i32 = -1;
pub const HE5_HDFE_GD_UL: u32 = 0;
pub const HE5_HDFE_GD_UR: u32 = 1;
pub const HE5_HDFE_GD_LL: u32 = 2;
pub const HE5_HDFE_GD_LR: u32 = 3;
pub const HE5_HDFE_CENTER: u32 = 0;
pub const HE5_HDFE_CORNER: u32 = 1;
pub const HE5_GCTP_GEO: u32 = 0;
pub const HE5_GCTP_UTM: u32 = 1;
pub const HE5_GCTP_SPCS: u32 = 2;
pub const HE5_GCTP_ALBERS: u32 = 3;
pub const HE5_GCTP_LAMCC: u32 = 4;
pub const HE5_GCTP_MERCAT: u32 = 5;
pub const HE5_GCTP_PS: u32 = 6;
pub const HE5_GCTP_POLYC: u32 = 7;
pub const HE5_GCTP_EQUIDC: u32 = 8;
pub const HE5_GCTP_TM: u32 = 9;
pub const HE5_GCTP_STEREO: u32 = 10;
pub const HE5_GCTP_LAMAZ: u32 = 11;
pub const HE5_GCTP_AZMEQD: u32 = 12;
pub const HE5_GCTP_GNOMON: u32 = 13;
pub const HE5_GCTP_ORTHO: u32 = 14;
pub const HE5_GCTP_GVNSP: u32 = 15;
pub const HE5_GCTP_SNSOID: u32 = 16;
pub const HE5_GCTP_EQRECT: u32 = 17;
pub const HE5_GCTP_MILLER: u32 = 18;
pub const HE5_GCTP_VGRINT: u32 = 19;
pub const HE5_GCTP_HOM: u32 = 20;
pub const HE5_GCTP_ROBIN: u32 = 21;
pub const HE5_GCTP_SOM: u32 = 22;
pub const HE5_GCTP_ALASKA: u32 = 23;
pub const HE5_GCTP_GOOD: u32 = 24;
pub const HE5_GCTP_MOLL: u32 = 25;
pub const HE5_GCTP_IMOLL: u32 = 26;
pub const HE5_GCTP_HAMMER: u32 = 27;
pub const HE5_GCTP_WAGIV: u32 = 28;
pub const HE5_GCTP_WAGVII: u32 = 29;
pub const HE5_GCTP_OBLEQA: u32 = 30;
pub const HE5_GCTP_CEA: u32 = 97;
pub const HE5_GCTP_BCEA: u32 = 98;
pub const HE5_GCTP_ISINUS: u32 = 99;
pub const HE5_HDFE_NOTILE: u32 = 0;
pub const HE5_HDFE_TILE: u32 = 1;
pub const HE5_HDFE_COMP_NONE: u32 = 0;
pub const HE5_HDFE_COMP_RLE: u32 = 1;
pub const HE5_HDFE_COMP_NBIT: u32 = 2;
pub const HE5_HDFE_COMP_SKPHUFF: u32 = 3;
pub const HE5_HDFE_COMP_DEFLATE: u32 = 4;
pub const HE5_HDFE_COMP_SZIP_CHIP: u32 = 5;
pub const HE5_HDFE_COMP_SZIP_K13: u32 = 6;
pub const HE5_HDFE_COMP_SZIP_EC: u32 = 7;
pub const HE5_HDFE_COMP_SZIP_NN: u32 = 8;
pub const HE5_HDFE_COMP_SZIP_K13orEC: u32 = 9;
pub const HE5_HDFE_COMP_SZIP_K13orNN: u32 = 10;
pub const HE5_HDFE_COMP_SHUF_DEFLATE: u32 = 11;
pub const HE5_HDFE_COMP_SHUF_SZIP_CHIP: u32 = 12;
pub const HE5_HDFE_COMP_SHUF_SZIP_K13: u32 = 13;
pub const HE5_HDFE_COMP_SHUF_SZIP_EC: u32 = 14;
pub const HE5_HDFE_COMP_SHUF_SZIP_NN: u32 = 15;
pub const HE5_HDFE_COMP_SHUF_SZIP_K13orEC: u32 = 16;
pub const HE5_HDFE_COMP_SHUF_SZIP_K13orNN: u32 = 17;
pub const HE5_HDFE_GEOGROUP: u32 = 0;
pub const HE5_HDFE_DATAGROUP: u32 = 1;
pub const HE5_HDFE_ATTRGROUP: u32 = 2;
pub const HE5_HDFE_GRPATTRGROUP: u32 = 3;
pub const HE5_HDFE_LOCATTRGROUP: u32 = 4;
pub const HE5_HDFE_PROFGROUP: u32 = 5;
pub const HE5_HDFE_PROFGRPATTRGROUP: u32 = 6;
pub const HE5_HDFE_GEOGRPATTRGROUP: u32 = 7;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type herr_t = ::std::os::raw::c_int;
pub type hbool_t = bool;
pub type htri_t = ::std::os::raw::c_int;
pub type hsize_t = ::std::os::raw::c_ulonglong;
pub type hssize_t = ::std::os::raw::c_longlong;
pub type haddr_t = ::std::os::raw::c_ulong;
pub const H5_iter_order_t_H5_ITER_UNKNOWN: H5_iter_order_t = -1;
pub const H5_iter_order_t_H5_ITER_INC: H5_iter_order_t = 0;
pub const H5_iter_order_t_H5_ITER_DEC: H5_iter_order_t = 1;
pub const H5_iter_order_t_H5_ITER_NATIVE: H5_iter_order_t = 2;
pub const H5_iter_order_t_H5_ITER_N: H5_iter_order_t = 3;
pub type H5_iter_order_t = ::std::os::raw::c_int;
pub const H5_index_t_H5_INDEX_UNKNOWN: H5_index_t = -1;
pub const H5_index_t_H5_INDEX_NAME: H5_index_t = 0;
pub const H5_index_t_H5_INDEX_CRT_ORDER: H5_index_t = 1;
pub const H5_index_t_H5_INDEX_N: H5_index_t = 2;
pub type H5_index_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5_ih_info_t {
    pub index_size: hsize_t,
    pub heap_size: hsize_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5_ih_info_t"][::std::mem::size_of::<H5_ih_info_t>() - 16usize];
    ["Alignment of H5_ih_info_t"][::std::mem::align_of::<H5_ih_info_t>() - 8usize];
    ["Offset of field: H5_ih_info_t::index_size"]
        [::std::mem::offset_of!(H5_ih_info_t, index_size) - 0usize];
    ["Offset of field: H5_ih_info_t::heap_size"]
        [::std::mem::offset_of!(H5_ih_info_t, heap_size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5_alloc_stats_t {
    pub total_alloc_bytes: ::std::os::raw::c_ulonglong,
    pub curr_alloc_bytes: usize,
    pub peak_alloc_bytes: usize,
    pub max_block_size: usize,
    pub total_alloc_blocks_count: usize,
    pub curr_alloc_blocks_count: usize,
    pub peak_alloc_blocks_count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5_alloc_stats_t"][::std::mem::size_of::<H5_alloc_stats_t>() - 56usize];
    ["Alignment of H5_alloc_stats_t"][::std::mem::align_of::<H5_alloc_stats_t>() - 8usize];
    ["Offset of field: H5_alloc_stats_t::total_alloc_bytes"]
        [::std::mem::offset_of!(H5_alloc_stats_t, total_alloc_bytes) - 0usize];
    ["Offset of field: H5_alloc_stats_t::curr_alloc_bytes"]
        [::std::mem::offset_of!(H5_alloc_stats_t, curr_alloc_bytes) - 8usize];
    ["Offset of field: H5_alloc_stats_t::peak_alloc_bytes"]
        [::std::mem::offset_of!(H5_alloc_stats_t, peak_alloc_bytes) - 16usize];
    ["Offset of field: H5_alloc_stats_t::max_block_size"]
        [::std::mem::offset_of!(H5_alloc_stats_t, max_block_size) - 24usize];
    ["Offset of field: H5_alloc_stats_t::total_alloc_blocks_count"]
        [::std::mem::offset_of!(H5_alloc_stats_t, total_alloc_blocks_count) - 32usize];
    ["Offset of field: H5_alloc_stats_t::curr_alloc_blocks_count"]
        [::std::mem::offset_of!(H5_alloc_stats_t, curr_alloc_blocks_count) - 40usize];
    ["Offset of field: H5_alloc_stats_t::peak_alloc_blocks_count"]
        [::std::mem::offset_of!(H5_alloc_stats_t, peak_alloc_blocks_count) - 48usize];
};
extern "C" {
    pub fn H5open() -> herr_t;
}
extern "C" {
    pub fn H5close() -> herr_t;
}
extern "C" {
    pub fn H5dont_atexit() -> herr_t;
}
extern "C" {
    pub fn H5garbage_collect() -> herr_t;
}
extern "C" {
    pub fn H5set_free_list_limits(
        reg_global_lim: ::std::os::raw::c_int,
        reg_list_lim: ::std::os::raw::c_int,
        arr_global_lim: ::std::os::raw::c_int,
        arr_list_lim: ::std::os::raw::c_int,
        blk_global_lim: ::std::os::raw::c_int,
        blk_list_lim: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5get_free_list_sizes(
        reg_size: *mut usize,
        arr_size: *mut usize,
        blk_size: *mut usize,
        fac_size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5get_alloc_stats(stats: *mut H5_alloc_stats_t) -> herr_t;
}
extern "C" {
    pub fn H5get_libversion(
        majnum: *mut ::std::os::raw::c_uint,
        minnum: *mut ::std::os::raw::c_uint,
        relnum: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5check_version(
        majnum: ::std::os::raw::c_uint,
        minnum: ::std::os::raw::c_uint,
        relnum: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5is_library_threadsafe(is_ts: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5free_memory(mem: *mut ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5allocate_memory(size: usize, clear: hbool_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5resize_memory(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub const H5I_type_t_H5I_UNINIT: H5I_type_t = -2;
pub const H5I_type_t_H5I_BADID: H5I_type_t = -1;
pub const H5I_type_t_H5I_FILE: H5I_type_t = 1;
pub const H5I_type_t_H5I_GROUP: H5I_type_t = 2;
pub const H5I_type_t_H5I_DATATYPE: H5I_type_t = 3;
pub const H5I_type_t_H5I_DATASPACE: H5I_type_t = 4;
pub const H5I_type_t_H5I_DATASET: H5I_type_t = 5;
pub const H5I_type_t_H5I_ATTR: H5I_type_t = 6;
pub const H5I_type_t_H5I_REFERENCE: H5I_type_t = 7;
pub const H5I_type_t_H5I_VFL: H5I_type_t = 8;
pub const H5I_type_t_H5I_GENPROP_CLS: H5I_type_t = 9;
pub const H5I_type_t_H5I_GENPROP_LST: H5I_type_t = 10;
pub const H5I_type_t_H5I_ERROR_CLASS: H5I_type_t = 11;
pub const H5I_type_t_H5I_ERROR_MSG: H5I_type_t = 12;
pub const H5I_type_t_H5I_ERROR_STACK: H5I_type_t = 13;
pub const H5I_type_t_H5I_NTYPES: H5I_type_t = 14;
pub type H5I_type_t = ::std::os::raw::c_int;
pub type hid_t = i64;
pub type H5I_free_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> herr_t>;
pub type H5I_search_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut ::std::os::raw::c_void,
        id: hid_t,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn H5Iregister(type_: H5I_type_t, object: *const ::std::os::raw::c_void) -> hid_t;
}
extern "C" {
    pub fn H5Iobject_verify(id: hid_t, id_type: H5I_type_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Iremove_verify(id: hid_t, id_type: H5I_type_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Iget_type(id: hid_t) -> H5I_type_t;
}
extern "C" {
    pub fn H5Iget_file_id(id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Iget_name(id: hid_t, name: *mut ::std::os::raw::c_char, size: usize) -> isize;
}
extern "C" {
    pub fn H5Iinc_ref(id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Idec_ref(id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Iget_ref(id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Iregister_type(
        hash_size: usize,
        reserved: ::std::os::raw::c_uint,
        free_func: H5I_free_t,
    ) -> H5I_type_t;
}
extern "C" {
    pub fn H5Iclear_type(type_: H5I_type_t, force: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Idestroy_type(type_: H5I_type_t) -> herr_t;
}
extern "C" {
    pub fn H5Iinc_type_ref(type_: H5I_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Idec_type_ref(type_: H5I_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Iget_type_ref(type_: H5I_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Isearch(
        type_: H5I_type_t,
        func: H5I_search_func_t,
        key: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Inmembers(type_: H5I_type_t, num_members: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Itype_exists(type_: H5I_type_t) -> htri_t;
}
extern "C" {
    pub fn H5Iis_valid(id: hid_t) -> htri_t;
}
pub const H5T_class_t_H5T_NO_CLASS: H5T_class_t = -1;
pub const H5T_class_t_H5T_INTEGER: H5T_class_t = 0;
pub const H5T_class_t_H5T_FLOAT: H5T_class_t = 1;
pub const H5T_class_t_H5T_TIME: H5T_class_t = 2;
pub const H5T_class_t_H5T_STRING: H5T_class_t = 3;
pub const H5T_class_t_H5T_BITFIELD: H5T_class_t = 4;
pub const H5T_class_t_H5T_OPAQUE: H5T_class_t = 5;
pub const H5T_class_t_H5T_COMPOUND: H5T_class_t = 6;
pub const H5T_class_t_H5T_REFERENCE: H5T_class_t = 7;
pub const H5T_class_t_H5T_ENUM: H5T_class_t = 8;
pub const H5T_class_t_H5T_VLEN: H5T_class_t = 9;
pub const H5T_class_t_H5T_ARRAY: H5T_class_t = 10;
pub const H5T_class_t_H5T_NCLASSES: H5T_class_t = 11;
pub type H5T_class_t = ::std::os::raw::c_int;
pub const H5T_order_t_H5T_ORDER_ERROR: H5T_order_t = -1;
pub const H5T_order_t_H5T_ORDER_LE: H5T_order_t = 0;
pub const H5T_order_t_H5T_ORDER_BE: H5T_order_t = 1;
pub const H5T_order_t_H5T_ORDER_VAX: H5T_order_t = 2;
pub const H5T_order_t_H5T_ORDER_MIXED: H5T_order_t = 3;
pub const H5T_order_t_H5T_ORDER_NONE: H5T_order_t = 4;
pub type H5T_order_t = ::std::os::raw::c_int;
pub const H5T_sign_t_H5T_SGN_ERROR: H5T_sign_t = -1;
pub const H5T_sign_t_H5T_SGN_NONE: H5T_sign_t = 0;
pub const H5T_sign_t_H5T_SGN_2: H5T_sign_t = 1;
pub const H5T_sign_t_H5T_NSGN: H5T_sign_t = 2;
pub type H5T_sign_t = ::std::os::raw::c_int;
pub const H5T_norm_t_H5T_NORM_ERROR: H5T_norm_t = -1;
pub const H5T_norm_t_H5T_NORM_IMPLIED: H5T_norm_t = 0;
pub const H5T_norm_t_H5T_NORM_MSBSET: H5T_norm_t = 1;
pub const H5T_norm_t_H5T_NORM_NONE: H5T_norm_t = 2;
pub type H5T_norm_t = ::std::os::raw::c_int;
pub const H5T_cset_t_H5T_CSET_ERROR: H5T_cset_t = -1;
pub const H5T_cset_t_H5T_CSET_ASCII: H5T_cset_t = 0;
pub const H5T_cset_t_H5T_CSET_UTF8: H5T_cset_t = 1;
pub const H5T_cset_t_H5T_CSET_RESERVED_2: H5T_cset_t = 2;
pub const H5T_cset_t_H5T_CSET_RESERVED_3: H5T_cset_t = 3;
pub const H5T_cset_t_H5T_CSET_RESERVED_4: H5T_cset_t = 4;
pub const H5T_cset_t_H5T_CSET_RESERVED_5: H5T_cset_t = 5;
pub const H5T_cset_t_H5T_CSET_RESERVED_6: H5T_cset_t = 6;
pub const H5T_cset_t_H5T_CSET_RESERVED_7: H5T_cset_t = 7;
pub const H5T_cset_t_H5T_CSET_RESERVED_8: H5T_cset_t = 8;
pub const H5T_cset_t_H5T_CSET_RESERVED_9: H5T_cset_t = 9;
pub const H5T_cset_t_H5T_CSET_RESERVED_10: H5T_cset_t = 10;
pub const H5T_cset_t_H5T_CSET_RESERVED_11: H5T_cset_t = 11;
pub const H5T_cset_t_H5T_CSET_RESERVED_12: H5T_cset_t = 12;
pub const H5T_cset_t_H5T_CSET_RESERVED_13: H5T_cset_t = 13;
pub const H5T_cset_t_H5T_CSET_RESERVED_14: H5T_cset_t = 14;
pub const H5T_cset_t_H5T_CSET_RESERVED_15: H5T_cset_t = 15;
pub type H5T_cset_t = ::std::os::raw::c_int;
pub const H5T_str_t_H5T_STR_ERROR: H5T_str_t = -1;
pub const H5T_str_t_H5T_STR_NULLTERM: H5T_str_t = 0;
pub const H5T_str_t_H5T_STR_NULLPAD: H5T_str_t = 1;
pub const H5T_str_t_H5T_STR_SPACEPAD: H5T_str_t = 2;
pub const H5T_str_t_H5T_STR_RESERVED_3: H5T_str_t = 3;
pub const H5T_str_t_H5T_STR_RESERVED_4: H5T_str_t = 4;
pub const H5T_str_t_H5T_STR_RESERVED_5: H5T_str_t = 5;
pub const H5T_str_t_H5T_STR_RESERVED_6: H5T_str_t = 6;
pub const H5T_str_t_H5T_STR_RESERVED_7: H5T_str_t = 7;
pub const H5T_str_t_H5T_STR_RESERVED_8: H5T_str_t = 8;
pub const H5T_str_t_H5T_STR_RESERVED_9: H5T_str_t = 9;
pub const H5T_str_t_H5T_STR_RESERVED_10: H5T_str_t = 10;
pub const H5T_str_t_H5T_STR_RESERVED_11: H5T_str_t = 11;
pub const H5T_str_t_H5T_STR_RESERVED_12: H5T_str_t = 12;
pub const H5T_str_t_H5T_STR_RESERVED_13: H5T_str_t = 13;
pub const H5T_str_t_H5T_STR_RESERVED_14: H5T_str_t = 14;
pub const H5T_str_t_H5T_STR_RESERVED_15: H5T_str_t = 15;
pub type H5T_str_t = ::std::os::raw::c_int;
pub const H5T_pad_t_H5T_PAD_ERROR: H5T_pad_t = -1;
pub const H5T_pad_t_H5T_PAD_ZERO: H5T_pad_t = 0;
pub const H5T_pad_t_H5T_PAD_ONE: H5T_pad_t = 1;
pub const H5T_pad_t_H5T_PAD_BACKGROUND: H5T_pad_t = 2;
pub const H5T_pad_t_H5T_NPAD: H5T_pad_t = 3;
pub type H5T_pad_t = ::std::os::raw::c_int;
pub const H5T_cmd_t_H5T_CONV_INIT: H5T_cmd_t = 0;
pub const H5T_cmd_t_H5T_CONV_CONV: H5T_cmd_t = 1;
pub const H5T_cmd_t_H5T_CONV_FREE: H5T_cmd_t = 2;
pub type H5T_cmd_t = ::std::os::raw::c_uint;
pub const H5T_bkg_t_H5T_BKG_NO: H5T_bkg_t = 0;
pub const H5T_bkg_t_H5T_BKG_TEMP: H5T_bkg_t = 1;
pub const H5T_bkg_t_H5T_BKG_YES: H5T_bkg_t = 2;
pub type H5T_bkg_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5T_cdata_t {
    pub command: H5T_cmd_t,
    pub need_bkg: H5T_bkg_t,
    pub recalc: hbool_t,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5T_cdata_t"][::std::mem::size_of::<H5T_cdata_t>() - 24usize];
    ["Alignment of H5T_cdata_t"][::std::mem::align_of::<H5T_cdata_t>() - 8usize];
    ["Offset of field: H5T_cdata_t::command"]
        [::std::mem::offset_of!(H5T_cdata_t, command) - 0usize];
    ["Offset of field: H5T_cdata_t::need_bkg"]
        [::std::mem::offset_of!(H5T_cdata_t, need_bkg) - 4usize];
    ["Offset of field: H5T_cdata_t::recalc"][::std::mem::offset_of!(H5T_cdata_t, recalc) - 8usize];
    ["Offset of field: H5T_cdata_t::priv_"][::std::mem::offset_of!(H5T_cdata_t, priv_) - 16usize];
};
pub const H5T_pers_t_H5T_PERS_DONTCARE: H5T_pers_t = -1;
pub const H5T_pers_t_H5T_PERS_HARD: H5T_pers_t = 0;
pub const H5T_pers_t_H5T_PERS_SOFT: H5T_pers_t = 1;
pub type H5T_pers_t = ::std::os::raw::c_int;
pub const H5T_direction_t_H5T_DIR_DEFAULT: H5T_direction_t = 0;
pub const H5T_direction_t_H5T_DIR_ASCEND: H5T_direction_t = 1;
pub const H5T_direction_t_H5T_DIR_DESCEND: H5T_direction_t = 2;
pub type H5T_direction_t = ::std::os::raw::c_uint;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_RANGE_HI: H5T_conv_except_t = 0;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_RANGE_LOW: H5T_conv_except_t = 1;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_PRECISION: H5T_conv_except_t = 2;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_TRUNCATE: H5T_conv_except_t = 3;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_PINF: H5T_conv_except_t = 4;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_NINF: H5T_conv_except_t = 5;
pub const H5T_conv_except_t_H5T_CONV_EXCEPT_NAN: H5T_conv_except_t = 6;
pub type H5T_conv_except_t = ::std::os::raw::c_uint;
pub const H5T_conv_ret_t_H5T_CONV_ABORT: H5T_conv_ret_t = -1;
pub const H5T_conv_ret_t_H5T_CONV_UNHANDLED: H5T_conv_ret_t = 0;
pub const H5T_conv_ret_t_H5T_CONV_HANDLED: H5T_conv_ret_t = 1;
pub type H5T_conv_ret_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvl_t {
    pub len: usize,
    pub p: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvl_t"][::std::mem::size_of::<hvl_t>() - 16usize];
    ["Alignment of hvl_t"][::std::mem::align_of::<hvl_t>() - 8usize];
    ["Offset of field: hvl_t::len"][::std::mem::offset_of!(hvl_t, len) - 0usize];
    ["Offset of field: hvl_t::p"][::std::mem::offset_of!(hvl_t, p) - 8usize];
};
pub type H5T_conv_t = ::std::option::Option<
    unsafe extern "C" fn(
        src_id: hid_t,
        dst_id: hid_t,
        cdata: *mut H5T_cdata_t,
        nelmts: usize,
        buf_stride: usize,
        bkg_stride: usize,
        buf: *mut ::std::os::raw::c_void,
        bkg: *mut ::std::os::raw::c_void,
        dset_xfer_plist: hid_t,
    ) -> herr_t,
>;
pub type H5T_conv_except_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        except_type: H5T_conv_except_t,
        src_id: hid_t,
        dst_id: hid_t,
        src_buf: *mut ::std::os::raw::c_void,
        dst_buf: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> H5T_conv_ret_t,
>;
extern "C" {
    pub static mut H5T_IEEE_F32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_IEEE_F64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I8BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I8LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I16BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I16LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_I64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U8BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U8LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U16BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U16LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_U64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B8BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B8LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B16BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B16LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_B64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_REF_OBJ_g: hid_t;
}
extern "C" {
    pub static mut H5T_STD_REF_DSETREG_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D32BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D32LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D64BE_g: hid_t;
}
extern "C" {
    pub static mut H5T_UNIX_D64LE_g: hid_t;
}
extern "C" {
    pub static mut H5T_C_S1_g: hid_t;
}
extern "C" {
    pub static mut H5T_FORTRAN_S1_g: hid_t;
}
extern "C" {
    pub static mut H5T_VAX_F32_g: hid_t;
}
extern "C" {
    pub static mut H5T_VAX_F64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_SCHAR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UCHAR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_SHORT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_USHORT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_LONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_ULONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_LLONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_ULLONG_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_FLOAT_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_DOUBLE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_LDOUBLE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_B64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_OPAQUE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HADDR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HSIZE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HSSIZE_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HERR_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_HBOOL_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST8_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST16_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST32_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_LEAST64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_LEAST64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_INT_FAST64_g: hid_t;
}
extern "C" {
    pub static mut H5T_NATIVE_UINT_FAST64_g: hid_t;
}
extern "C" {
    pub fn H5Tcreate(type_: H5T_class_t, size: usize) -> hid_t;
}
extern "C" {
    pub fn H5Tcopy(type_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tclose(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tequal(type1_id: hid_t, type2_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Tlock(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tcommit2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        lcpl_id: hid_t,
        tcpl_id: hid_t,
        tapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Topen2(loc_id: hid_t, name: *const ::std::os::raw::c_char, tapl_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tcommit_anon(loc_id: hid_t, type_id: hid_t, tcpl_id: hid_t, tapl_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tget_create_plist(type_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tcommitted(type_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Tencode(obj_id: hid_t, buf: *mut ::std::os::raw::c_void, nalloc: *mut usize)
        -> herr_t;
}
extern "C" {
    pub fn H5Tdecode(buf: *const ::std::os::raw::c_void) -> hid_t;
}
extern "C" {
    pub fn H5Tflush(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Trefresh(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tinsert(
        parent_id: hid_t,
        name: *const ::std::os::raw::c_char,
        offset: usize,
        member_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tpack(type_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Tenum_create(base_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tenum_insert(
        type_: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tenum_nameof(
        type_: hid_t,
        value: *const ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tenum_valueof(
        type_: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tvlen_create(base_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tarray_create2(
        base_id: hid_t,
        ndims: ::std::os::raw::c_uint,
        dim: *const hsize_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tget_array_ndims(type_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_array_dims2(type_id: hid_t, dims: *mut hsize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tset_tag(type_: hid_t, tag: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Tget_tag(type_: hid_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Tget_super(type_: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Tget_class(type_id: hid_t) -> H5T_class_t;
}
extern "C" {
    pub fn H5Tdetect_class(type_id: hid_t, cls: H5T_class_t) -> htri_t;
}
extern "C" {
    pub fn H5Tget_size(type_id: hid_t) -> usize;
}
extern "C" {
    pub fn H5Tget_order(type_id: hid_t) -> H5T_order_t;
}
extern "C" {
    pub fn H5Tget_precision(type_id: hid_t) -> usize;
}
extern "C" {
    pub fn H5Tget_offset(type_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_pad(type_id: hid_t, lsb: *mut H5T_pad_t, msb: *mut H5T_pad_t) -> herr_t;
}
extern "C" {
    pub fn H5Tget_sign(type_id: hid_t) -> H5T_sign_t;
}
extern "C" {
    pub fn H5Tget_fields(
        type_id: hid_t,
        spos: *mut usize,
        epos: *mut usize,
        esize: *mut usize,
        mpos: *mut usize,
        msize: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tget_ebias(type_id: hid_t) -> usize;
}
extern "C" {
    pub fn H5Tget_norm(type_id: hid_t) -> H5T_norm_t;
}
extern "C" {
    pub fn H5Tget_inpad(type_id: hid_t) -> H5T_pad_t;
}
extern "C" {
    pub fn H5Tget_strpad(type_id: hid_t) -> H5T_str_t;
}
extern "C" {
    pub fn H5Tget_nmembers(type_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_member_name(
        type_id: hid_t,
        membno: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Tget_member_index(
        type_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Tget_member_offset(type_id: hid_t, membno: ::std::os::raw::c_uint) -> usize;
}
extern "C" {
    pub fn H5Tget_member_class(type_id: hid_t, membno: ::std::os::raw::c_uint) -> H5T_class_t;
}
extern "C" {
    pub fn H5Tget_member_type(type_id: hid_t, membno: ::std::os::raw::c_uint) -> hid_t;
}
extern "C" {
    pub fn H5Tget_member_value(
        type_id: hid_t,
        membno: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tget_cset(type_id: hid_t) -> H5T_cset_t;
}
extern "C" {
    pub fn H5Tis_variable_str(type_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Tget_native_type(type_id: hid_t, direction: H5T_direction_t) -> hid_t;
}
extern "C" {
    pub fn H5Tset_size(type_id: hid_t, size: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_order(type_id: hid_t, order: H5T_order_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_precision(type_id: hid_t, prec: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_offset(type_id: hid_t, offset: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_pad(type_id: hid_t, lsb: H5T_pad_t, msb: H5T_pad_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_sign(type_id: hid_t, sign: H5T_sign_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_fields(
        type_id: hid_t,
        spos: usize,
        epos: usize,
        esize: usize,
        mpos: usize,
        msize: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tset_ebias(type_id: hid_t, ebias: usize) -> herr_t;
}
extern "C" {
    pub fn H5Tset_norm(type_id: hid_t, norm: H5T_norm_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_inpad(type_id: hid_t, pad: H5T_pad_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_cset(type_id: hid_t, cset: H5T_cset_t) -> herr_t;
}
extern "C" {
    pub fn H5Tset_strpad(type_id: hid_t, strpad: H5T_str_t) -> herr_t;
}
extern "C" {
    pub fn H5Tregister(
        pers: H5T_pers_t,
        name: *const ::std::os::raw::c_char,
        src_id: hid_t,
        dst_id: hid_t,
        func: H5T_conv_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tunregister(
        pers: H5T_pers_t,
        name: *const ::std::os::raw::c_char,
        src_id: hid_t,
        dst_id: hid_t,
        func: H5T_conv_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tfind(src_id: hid_t, dst_id: hid_t, pcdata: *mut *mut H5T_cdata_t) -> H5T_conv_t;
}
extern "C" {
    pub fn H5Tcompiler_conv(src_id: hid_t, dst_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Tconvert(
        src_id: hid_t,
        dst_id: hid_t,
        nelmts: usize,
        buf: *mut ::std::os::raw::c_void,
        background: *mut ::std::os::raw::c_void,
        plist_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Tcommit1(loc_id: hid_t, name: *const ::std::os::raw::c_char, type_id: hid_t)
        -> herr_t;
}
extern "C" {
    pub fn H5Topen1(loc_id: hid_t, name: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn H5Tarray_create1(
        base_id: hid_t,
        ndims: ::std::os::raw::c_int,
        dim: *const hsize_t,
        perm: *const ::std::os::raw::c_int,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Tget_array_dims1(
        type_id: hid_t,
        dims: *mut hsize_t,
        perm: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const H5L_type_t_H5L_TYPE_ERROR: H5L_type_t = -1;
pub const H5L_type_t_H5L_TYPE_HARD: H5L_type_t = 0;
pub const H5L_type_t_H5L_TYPE_SOFT: H5L_type_t = 1;
pub const H5L_type_t_H5L_TYPE_EXTERNAL: H5L_type_t = 64;
pub const H5L_type_t_H5L_TYPE_MAX: H5L_type_t = 255;
pub type H5L_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct H5L_info_t {
    pub type_: H5L_type_t,
    pub corder_valid: hbool_t,
    pub corder: i64,
    pub cset: H5T_cset_t,
    pub u: H5L_info_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union H5L_info_t__bindgen_ty_1 {
    pub address: haddr_t,
    pub val_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5L_info_t__bindgen_ty_1"]
        [::std::mem::size_of::<H5L_info_t__bindgen_ty_1>() - 8usize];
    ["Alignment of H5L_info_t__bindgen_ty_1"]
        [::std::mem::align_of::<H5L_info_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: H5L_info_t__bindgen_ty_1::address"]
        [::std::mem::offset_of!(H5L_info_t__bindgen_ty_1, address) - 0usize];
    ["Offset of field: H5L_info_t__bindgen_ty_1::val_size"]
        [::std::mem::offset_of!(H5L_info_t__bindgen_ty_1, val_size) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5L_info_t"][::std::mem::size_of::<H5L_info_t>() - 32usize];
    ["Alignment of H5L_info_t"][::std::mem::align_of::<H5L_info_t>() - 8usize];
    ["Offset of field: H5L_info_t::type_"][::std::mem::offset_of!(H5L_info_t, type_) - 0usize];
    ["Offset of field: H5L_info_t::corder_valid"]
        [::std::mem::offset_of!(H5L_info_t, corder_valid) - 4usize];
    ["Offset of field: H5L_info_t::corder"][::std::mem::offset_of!(H5L_info_t, corder) - 8usize];
    ["Offset of field: H5L_info_t::cset"][::std::mem::offset_of!(H5L_info_t, cset) - 16usize];
    ["Offset of field: H5L_info_t::u"][::std::mem::offset_of!(H5L_info_t, u) - 24usize];
};
pub type H5L_create_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        loc_group: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        lcpl_id: hid_t,
    ) -> herr_t,
>;
pub type H5L_move_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        new_name: *const ::std::os::raw::c_char,
        new_loc: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
    ) -> herr_t,
>;
pub type H5L_copy_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        new_name: *const ::std::os::raw::c_char,
        new_loc: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
    ) -> herr_t,
>;
pub type H5L_traverse_0_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        cur_group: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        lapl_id: hid_t,
    ) -> hid_t,
>;
pub type H5L_traverse_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        cur_group: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        lapl_id: hid_t,
        dxpl_id: hid_t,
    ) -> hid_t,
>;
pub type H5L_delete_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        file: hid_t,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
    ) -> herr_t,
>;
pub type H5L_query_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        link_name: *const ::std::os::raw::c_char,
        lnkdata: *const ::std::os::raw::c_void,
        lnkdata_size: usize,
        buf: *mut ::std::os::raw::c_void,
        buf_size: usize,
    ) -> isize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5L_class_0_t {
    pub version: ::std::os::raw::c_int,
    pub id: H5L_type_t,
    pub comment: *const ::std::os::raw::c_char,
    pub create_func: H5L_create_func_t,
    pub move_func: H5L_move_func_t,
    pub copy_func: H5L_copy_func_t,
    pub trav_func: H5L_traverse_0_func_t,
    pub del_func: H5L_delete_func_t,
    pub query_func: H5L_query_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5L_class_0_t"][::std::mem::size_of::<H5L_class_0_t>() - 64usize];
    ["Alignment of H5L_class_0_t"][::std::mem::align_of::<H5L_class_0_t>() - 8usize];
    ["Offset of field: H5L_class_0_t::version"]
        [::std::mem::offset_of!(H5L_class_0_t, version) - 0usize];
    ["Offset of field: H5L_class_0_t::id"][::std::mem::offset_of!(H5L_class_0_t, id) - 4usize];
    ["Offset of field: H5L_class_0_t::comment"]
        [::std::mem::offset_of!(H5L_class_0_t, comment) - 8usize];
    ["Offset of field: H5L_class_0_t::create_func"]
        [::std::mem::offset_of!(H5L_class_0_t, create_func) - 16usize];
    ["Offset of field: H5L_class_0_t::move_func"]
        [::std::mem::offset_of!(H5L_class_0_t, move_func) - 24usize];
    ["Offset of field: H5L_class_0_t::copy_func"]
        [::std::mem::offset_of!(H5L_class_0_t, copy_func) - 32usize];
    ["Offset of field: H5L_class_0_t::trav_func"]
        [::std::mem::offset_of!(H5L_class_0_t, trav_func) - 40usize];
    ["Offset of field: H5L_class_0_t::del_func"]
        [::std::mem::offset_of!(H5L_class_0_t, del_func) - 48usize];
    ["Offset of field: H5L_class_0_t::query_func"]
        [::std::mem::offset_of!(H5L_class_0_t, query_func) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5L_class_t {
    pub version: ::std::os::raw::c_int,
    pub id: H5L_type_t,
    pub comment: *const ::std::os::raw::c_char,
    pub create_func: H5L_create_func_t,
    pub move_func: H5L_move_func_t,
    pub copy_func: H5L_copy_func_t,
    pub trav_func: H5L_traverse_func_t,
    pub del_func: H5L_delete_func_t,
    pub query_func: H5L_query_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5L_class_t"][::std::mem::size_of::<H5L_class_t>() - 64usize];
    ["Alignment of H5L_class_t"][::std::mem::align_of::<H5L_class_t>() - 8usize];
    ["Offset of field: H5L_class_t::version"]
        [::std::mem::offset_of!(H5L_class_t, version) - 0usize];
    ["Offset of field: H5L_class_t::id"][::std::mem::offset_of!(H5L_class_t, id) - 4usize];
    ["Offset of field: H5L_class_t::comment"]
        [::std::mem::offset_of!(H5L_class_t, comment) - 8usize];
    ["Offset of field: H5L_class_t::create_func"]
        [::std::mem::offset_of!(H5L_class_t, create_func) - 16usize];
    ["Offset of field: H5L_class_t::move_func"]
        [::std::mem::offset_of!(H5L_class_t, move_func) - 24usize];
    ["Offset of field: H5L_class_t::copy_func"]
        [::std::mem::offset_of!(H5L_class_t, copy_func) - 32usize];
    ["Offset of field: H5L_class_t::trav_func"]
        [::std::mem::offset_of!(H5L_class_t, trav_func) - 40usize];
    ["Offset of field: H5L_class_t::del_func"]
        [::std::mem::offset_of!(H5L_class_t, del_func) - 48usize];
    ["Offset of field: H5L_class_t::query_func"]
        [::std::mem::offset_of!(H5L_class_t, query_func) - 56usize];
};
pub type H5L_iterate_t = ::std::option::Option<
    unsafe extern "C" fn(
        group: hid_t,
        name: *const ::std::os::raw::c_char,
        info: *const H5L_info_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5L_elink_traverse_t = ::std::option::Option<
    unsafe extern "C" fn(
        parent_file_name: *const ::std::os::raw::c_char,
        parent_group_name: *const ::std::os::raw::c_char,
        child_file_name: *const ::std::os::raw::c_char,
        child_object_name: *const ::std::os::raw::c_char,
        acc_flags: *mut ::std::os::raw::c_uint,
        fapl_id: hid_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Lmove(
        src_loc: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcopy(
        src_loc: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_hard(
        cur_loc: hid_t,
        cur_name: *const ::std::os::raw::c_char,
        dst_loc: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_soft(
        link_target: *const ::std::os::raw::c_char,
        link_loc_id: hid_t,
        link_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ldelete(loc_id: hid_t, name: *const ::std::os::raw::c_char, lapl_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Ldelete_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_val(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_void,
        size: usize,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_val_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        buf: *mut ::std::os::raw::c_void,
        size: usize,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lexists(loc_id: hid_t, name: *const ::std::os::raw::c_char, lapl_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Lget_info(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        linfo: *mut H5L_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_info_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        linfo: *mut H5L_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lget_name_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
        lapl_id: hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Literate(
        grp_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5L_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Literate_by_name(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5L_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lvisit(
        grp_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5L_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lvisit_by_name(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5L_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_ud(
        link_loc_id: hid_t,
        link_name: *const ::std::os::raw::c_char,
        link_type: H5L_type_t,
        udata: *const ::std::os::raw::c_void,
        udata_size: usize,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lregister(cls: *const H5L_class_t) -> herr_t;
}
extern "C" {
    pub fn H5Lunregister(id: H5L_type_t) -> herr_t;
}
extern "C" {
    pub fn H5Lis_registered(id: H5L_type_t) -> htri_t;
}
extern "C" {
    pub fn H5Lunpack_elink_val(
        ext_linkval: *const ::std::os::raw::c_void,
        link_size: usize,
        flags: *mut ::std::os::raw::c_uint,
        filename: *mut *const ::std::os::raw::c_char,
        obj_path: *mut *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Lcreate_external(
        file_name: *const ::std::os::raw::c_char,
        obj_name: *const ::std::os::raw::c_char,
        link_loc_id: hid_t,
        link_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
pub const H5O_type_t_H5O_TYPE_UNKNOWN: H5O_type_t = -1;
pub const H5O_type_t_H5O_TYPE_GROUP: H5O_type_t = 0;
pub const H5O_type_t_H5O_TYPE_DATASET: H5O_type_t = 1;
pub const H5O_type_t_H5O_TYPE_NAMED_DATATYPE: H5O_type_t = 2;
pub const H5O_type_t_H5O_TYPE_NTYPES: H5O_type_t = 3;
pub type H5O_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_hdr_info_t {
    pub version: ::std::os::raw::c_uint,
    pub nmesgs: ::std::os::raw::c_uint,
    pub nchunks: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub space: H5O_hdr_info_t__bindgen_ty_1,
    pub mesg: H5O_hdr_info_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_hdr_info_t__bindgen_ty_1 {
    pub total: hsize_t,
    pub meta: hsize_t,
    pub mesg: hsize_t,
    pub free: hsize_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5O_hdr_info_t__bindgen_ty_1"]
        [::std::mem::size_of::<H5O_hdr_info_t__bindgen_ty_1>() - 32usize];
    ["Alignment of H5O_hdr_info_t__bindgen_ty_1"]
        [::std::mem::align_of::<H5O_hdr_info_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: H5O_hdr_info_t__bindgen_ty_1::total"]
        [::std::mem::offset_of!(H5O_hdr_info_t__bindgen_ty_1, total) - 0usize];
    ["Offset of field: H5O_hdr_info_t__bindgen_ty_1::meta"]
        [::std::mem::offset_of!(H5O_hdr_info_t__bindgen_ty_1, meta) - 8usize];
    ["Offset of field: H5O_hdr_info_t__bindgen_ty_1::mesg"]
        [::std::mem::offset_of!(H5O_hdr_info_t__bindgen_ty_1, mesg) - 16usize];
    ["Offset of field: H5O_hdr_info_t__bindgen_ty_1::free"]
        [::std::mem::offset_of!(H5O_hdr_info_t__bindgen_ty_1, free) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_hdr_info_t__bindgen_ty_2 {
    pub present: u64,
    pub shared: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5O_hdr_info_t__bindgen_ty_2"]
        [::std::mem::size_of::<H5O_hdr_info_t__bindgen_ty_2>() - 16usize];
    ["Alignment of H5O_hdr_info_t__bindgen_ty_2"]
        [::std::mem::align_of::<H5O_hdr_info_t__bindgen_ty_2>() - 8usize];
    ["Offset of field: H5O_hdr_info_t__bindgen_ty_2::present"]
        [::std::mem::offset_of!(H5O_hdr_info_t__bindgen_ty_2, present) - 0usize];
    ["Offset of field: H5O_hdr_info_t__bindgen_ty_2::shared"]
        [::std::mem::offset_of!(H5O_hdr_info_t__bindgen_ty_2, shared) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5O_hdr_info_t"][::std::mem::size_of::<H5O_hdr_info_t>() - 64usize];
    ["Alignment of H5O_hdr_info_t"][::std::mem::align_of::<H5O_hdr_info_t>() - 8usize];
    ["Offset of field: H5O_hdr_info_t::version"]
        [::std::mem::offset_of!(H5O_hdr_info_t, version) - 0usize];
    ["Offset of field: H5O_hdr_info_t::nmesgs"]
        [::std::mem::offset_of!(H5O_hdr_info_t, nmesgs) - 4usize];
    ["Offset of field: H5O_hdr_info_t::nchunks"]
        [::std::mem::offset_of!(H5O_hdr_info_t, nchunks) - 8usize];
    ["Offset of field: H5O_hdr_info_t::flags"]
        [::std::mem::offset_of!(H5O_hdr_info_t, flags) - 12usize];
    ["Offset of field: H5O_hdr_info_t::space"]
        [::std::mem::offset_of!(H5O_hdr_info_t, space) - 16usize];
    ["Offset of field: H5O_hdr_info_t::mesg"]
        [::std::mem::offset_of!(H5O_hdr_info_t, mesg) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_info_t {
    pub fileno: ::std::os::raw::c_ulong,
    pub addr: haddr_t,
    pub type_: H5O_type_t,
    pub rc: ::std::os::raw::c_uint,
    pub atime: time_t,
    pub mtime: time_t,
    pub ctime: time_t,
    pub btime: time_t,
    pub num_attrs: hsize_t,
    pub hdr: H5O_hdr_info_t,
    pub meta_size: H5O_info_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_info_t__bindgen_ty_1 {
    pub obj: H5_ih_info_t,
    pub attr: H5_ih_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5O_info_t__bindgen_ty_1"]
        [::std::mem::size_of::<H5O_info_t__bindgen_ty_1>() - 32usize];
    ["Alignment of H5O_info_t__bindgen_ty_1"]
        [::std::mem::align_of::<H5O_info_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: H5O_info_t__bindgen_ty_1::obj"]
        [::std::mem::offset_of!(H5O_info_t__bindgen_ty_1, obj) - 0usize];
    ["Offset of field: H5O_info_t__bindgen_ty_1::attr"]
        [::std::mem::offset_of!(H5O_info_t__bindgen_ty_1, attr) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5O_info_t"][::std::mem::size_of::<H5O_info_t>() - 160usize];
    ["Alignment of H5O_info_t"][::std::mem::align_of::<H5O_info_t>() - 8usize];
    ["Offset of field: H5O_info_t::fileno"][::std::mem::offset_of!(H5O_info_t, fileno) - 0usize];
    ["Offset of field: H5O_info_t::addr"][::std::mem::offset_of!(H5O_info_t, addr) - 8usize];
    ["Offset of field: H5O_info_t::type_"][::std::mem::offset_of!(H5O_info_t, type_) - 16usize];
    ["Offset of field: H5O_info_t::rc"][::std::mem::offset_of!(H5O_info_t, rc) - 20usize];
    ["Offset of field: H5O_info_t::atime"][::std::mem::offset_of!(H5O_info_t, atime) - 24usize];
    ["Offset of field: H5O_info_t::mtime"][::std::mem::offset_of!(H5O_info_t, mtime) - 32usize];
    ["Offset of field: H5O_info_t::ctime"][::std::mem::offset_of!(H5O_info_t, ctime) - 40usize];
    ["Offset of field: H5O_info_t::btime"][::std::mem::offset_of!(H5O_info_t, btime) - 48usize];
    ["Offset of field: H5O_info_t::num_attrs"]
        [::std::mem::offset_of!(H5O_info_t, num_attrs) - 56usize];
    ["Offset of field: H5O_info_t::hdr"][::std::mem::offset_of!(H5O_info_t, hdr) - 64usize];
    ["Offset of field: H5O_info_t::meta_size"]
        [::std::mem::offset_of!(H5O_info_t, meta_size) - 128usize];
};
pub type H5O_msg_crt_idx_t = u32;
pub type H5O_iterate_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: hid_t,
        name: *const ::std::os::raw::c_char,
        info: *const H5O_info_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub const H5O_mcdt_search_ret_t_H5O_MCDT_SEARCH_ERROR: H5O_mcdt_search_ret_t = -1;
pub const H5O_mcdt_search_ret_t_H5O_MCDT_SEARCH_CONT: H5O_mcdt_search_ret_t = 0;
pub const H5O_mcdt_search_ret_t_H5O_MCDT_SEARCH_STOP: H5O_mcdt_search_ret_t = 1;
pub type H5O_mcdt_search_ret_t = ::std::os::raw::c_int;
pub type H5O_mcdt_search_cb_t = ::std::option::Option<
    unsafe extern "C" fn(op_data: *mut ::std::os::raw::c_void) -> H5O_mcdt_search_ret_t,
>;
extern "C" {
    pub fn H5Oopen(loc_id: hid_t, name: *const ::std::os::raw::c_char, lapl_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Oopen_by_addr(loc_id: hid_t, addr: haddr_t) -> hid_t;
}
extern "C" {
    pub fn H5Oopen_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Oexists_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Oget_info2(
        loc_id: hid_t,
        oinfo: *mut H5O_info_t,
        fields: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_name2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_info_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_idx2(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        oinfo: *mut H5O_info_t,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Olink(
        obj_id: hid_t,
        new_loc_id: hid_t,
        new_name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oincr_refcount(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Odecr_refcount(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Ocopy(
        src_loc_id: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc_id: hid_t,
        dst_name: *const ::std::os::raw::c_char,
        ocpypl_id: hid_t,
        lcpl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oset_comment(obj_id: hid_t, comment: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Oset_comment_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        comment: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_comment(
        obj_id: hid_t,
        comment: *mut ::std::os::raw::c_char,
        bufsize: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Oget_comment_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        comment: *mut ::std::os::raw::c_char,
        bufsize: usize,
        lapl_id: hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Ovisit2(
        obj_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
        fields: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit_by_name2(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
        fields: ::std::os::raw::c_uint,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oclose(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Oflush(obj_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Orefresh(oid: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Odisable_mdc_flushes(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Oenable_mdc_flushes(object_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Oare_mdc_flushes_disabled(object_id: hid_t, are_disabled: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info(loc_id: hid_t, oinfo: *mut H5O_info_t) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        oinfo: *mut H5O_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit(
        obj_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info1(loc_id: hid_t, oinfo: *mut H5O_info_t) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_name1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        oinfo: *mut H5O_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Oget_info_by_idx1(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        oinfo: *mut H5O_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit1(
        obj_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ovisit_by_name1(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        op: H5O_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
        lapl_id: hid_t,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5O_stat_t {
    pub size: hsize_t,
    pub free: hsize_t,
    pub nmesgs: ::std::os::raw::c_uint,
    pub nchunks: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5O_stat_t"][::std::mem::size_of::<H5O_stat_t>() - 24usize];
    ["Alignment of H5O_stat_t"][::std::mem::align_of::<H5O_stat_t>() - 8usize];
    ["Offset of field: H5O_stat_t::size"][::std::mem::offset_of!(H5O_stat_t, size) - 0usize];
    ["Offset of field: H5O_stat_t::free"][::std::mem::offset_of!(H5O_stat_t, free) - 8usize];
    ["Offset of field: H5O_stat_t::nmesgs"][::std::mem::offset_of!(H5O_stat_t, nmesgs) - 16usize];
    ["Offset of field: H5O_stat_t::nchunks"][::std::mem::offset_of!(H5O_stat_t, nchunks) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5A_info_t {
    pub corder_valid: hbool_t,
    pub corder: H5O_msg_crt_idx_t,
    pub cset: H5T_cset_t,
    pub data_size: hsize_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5A_info_t"][::std::mem::size_of::<H5A_info_t>() - 24usize];
    ["Alignment of H5A_info_t"][::std::mem::align_of::<H5A_info_t>() - 8usize];
    ["Offset of field: H5A_info_t::corder_valid"]
        [::std::mem::offset_of!(H5A_info_t, corder_valid) - 0usize];
    ["Offset of field: H5A_info_t::corder"][::std::mem::offset_of!(H5A_info_t, corder) - 4usize];
    ["Offset of field: H5A_info_t::cset"][::std::mem::offset_of!(H5A_info_t, cset) - 8usize];
    ["Offset of field: H5A_info_t::data_size"]
        [::std::mem::offset_of!(H5A_info_t, data_size) - 16usize];
};
pub type H5A_operator2_t = ::std::option::Option<
    unsafe extern "C" fn(
        location_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        ainfo: *const H5A_info_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Acreate2(
        loc_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
        aapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Acreate_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
        aapl_id: hid_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen(
        obj_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        aapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        aapl_id: hid_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        aapl_id: hid_t,
        lapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Awrite(attr_id: hid_t, type_id: hid_t, buf: *const ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5Aread(attr_id: hid_t, type_id: hid_t, buf: *mut ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5Aclose(attr_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Aget_space(attr_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Aget_type(attr_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Aget_create_plist(attr_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Aget_name(attr_id: hid_t, buf_size: usize, buf: *mut ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn H5Aget_name_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
        lapl_id: hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Aget_storage_size(attr_id: hid_t) -> hsize_t;
}
extern "C" {
    pub fn H5Aget_info(attr_id: hid_t, ainfo: *mut H5A_info_t) -> herr_t;
}
extern "C" {
    pub fn H5Aget_info_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        ainfo: *mut H5A_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aget_info_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        ainfo: *mut H5A_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Arename(
        loc_id: hid_t,
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Arename_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        old_attr_name: *const ::std::os::raw::c_char,
        new_attr_name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aiterate2(
        loc_id: hid_t,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5A_operator2_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aiterate_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        idx: *mut hsize_t,
        op: H5A_operator2_t,
        op_data: *mut ::std::os::raw::c_void,
        lapd_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Adelete(loc_id: hid_t, name: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Adelete_by_name(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Adelete_by_idx(
        loc_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Aexists(obj_id: hid_t, attr_name: *const ::std::os::raw::c_char) -> htri_t;
}
extern "C" {
    pub fn H5Aexists_by_name(
        obj_id: hid_t,
        obj_name: *const ::std::os::raw::c_char,
        attr_name: *const ::std::os::raw::c_char,
        lapl_id: hid_t,
    ) -> htri_t;
}
pub type H5A_operator1_t = ::std::option::Option<
    unsafe extern "C" fn(
        location_id: hid_t,
        attr_name: *const ::std::os::raw::c_char,
        operator_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Acreate1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        acpl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_name(loc_id: hid_t, name: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn H5Aopen_idx(loc_id: hid_t, idx: ::std::os::raw::c_uint) -> hid_t;
}
extern "C" {
    pub fn H5Aget_num_attrs(loc_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Aiterate1(
        loc_id: hid_t,
        attr_num: *mut ::std::os::raw::c_uint,
        op: H5A_operator1_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
pub const H5C_cache_incr_mode_H5C_incr__off: H5C_cache_incr_mode = 0;
pub const H5C_cache_incr_mode_H5C_incr__threshold: H5C_cache_incr_mode = 1;
pub type H5C_cache_incr_mode = ::std::os::raw::c_uint;
pub const H5C_cache_flash_incr_mode_H5C_flash_incr__off: H5C_cache_flash_incr_mode = 0;
pub const H5C_cache_flash_incr_mode_H5C_flash_incr__add_space: H5C_cache_flash_incr_mode = 1;
pub type H5C_cache_flash_incr_mode = ::std::os::raw::c_uint;
pub const H5C_cache_decr_mode_H5C_decr__off: H5C_cache_decr_mode = 0;
pub const H5C_cache_decr_mode_H5C_decr__threshold: H5C_cache_decr_mode = 1;
pub const H5C_cache_decr_mode_H5C_decr__age_out: H5C_cache_decr_mode = 2;
pub const H5C_cache_decr_mode_H5C_decr__age_out_with_threshold: H5C_cache_decr_mode = 3;
pub type H5C_cache_decr_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5AC_cache_config_t {
    pub version: ::std::os::raw::c_int,
    pub rpt_fcn_enabled: hbool_t,
    pub open_trace_file: hbool_t,
    pub close_trace_file: hbool_t,
    pub trace_file_name: [::std::os::raw::c_char; 1025usize],
    pub evictions_enabled: hbool_t,
    pub set_initial_size: hbool_t,
    pub initial_size: usize,
    pub min_clean_fraction: f64,
    pub max_size: usize,
    pub min_size: usize,
    pub epoch_length: ::std::os::raw::c_long,
    pub incr_mode: H5C_cache_incr_mode,
    pub lower_hr_threshold: f64,
    pub increment: f64,
    pub apply_max_increment: hbool_t,
    pub max_increment: usize,
    pub flash_incr_mode: H5C_cache_flash_incr_mode,
    pub flash_multiple: f64,
    pub flash_threshold: f64,
    pub decr_mode: H5C_cache_decr_mode,
    pub upper_hr_threshold: f64,
    pub decrement: f64,
    pub apply_max_decrement: hbool_t,
    pub max_decrement: usize,
    pub epochs_before_eviction: ::std::os::raw::c_int,
    pub apply_empty_reserve: hbool_t,
    pub empty_reserve: f64,
    pub dirty_bytes_threshold: usize,
    pub metadata_write_strategy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5AC_cache_config_t"][::std::mem::size_of::<H5AC_cache_config_t>() - 1216usize];
    ["Alignment of H5AC_cache_config_t"][::std::mem::align_of::<H5AC_cache_config_t>() - 8usize];
    ["Offset of field: H5AC_cache_config_t::version"]
        [::std::mem::offset_of!(H5AC_cache_config_t, version) - 0usize];
    ["Offset of field: H5AC_cache_config_t::rpt_fcn_enabled"]
        [::std::mem::offset_of!(H5AC_cache_config_t, rpt_fcn_enabled) - 4usize];
    ["Offset of field: H5AC_cache_config_t::open_trace_file"]
        [::std::mem::offset_of!(H5AC_cache_config_t, open_trace_file) - 5usize];
    ["Offset of field: H5AC_cache_config_t::close_trace_file"]
        [::std::mem::offset_of!(H5AC_cache_config_t, close_trace_file) - 6usize];
    ["Offset of field: H5AC_cache_config_t::trace_file_name"]
        [::std::mem::offset_of!(H5AC_cache_config_t, trace_file_name) - 7usize];
    ["Offset of field: H5AC_cache_config_t::evictions_enabled"]
        [::std::mem::offset_of!(H5AC_cache_config_t, evictions_enabled) - 1032usize];
    ["Offset of field: H5AC_cache_config_t::set_initial_size"]
        [::std::mem::offset_of!(H5AC_cache_config_t, set_initial_size) - 1033usize];
    ["Offset of field: H5AC_cache_config_t::initial_size"]
        [::std::mem::offset_of!(H5AC_cache_config_t, initial_size) - 1040usize];
    ["Offset of field: H5AC_cache_config_t::min_clean_fraction"]
        [::std::mem::offset_of!(H5AC_cache_config_t, min_clean_fraction) - 1048usize];
    ["Offset of field: H5AC_cache_config_t::max_size"]
        [::std::mem::offset_of!(H5AC_cache_config_t, max_size) - 1056usize];
    ["Offset of field: H5AC_cache_config_t::min_size"]
        [::std::mem::offset_of!(H5AC_cache_config_t, min_size) - 1064usize];
    ["Offset of field: H5AC_cache_config_t::epoch_length"]
        [::std::mem::offset_of!(H5AC_cache_config_t, epoch_length) - 1072usize];
    ["Offset of field: H5AC_cache_config_t::incr_mode"]
        [::std::mem::offset_of!(H5AC_cache_config_t, incr_mode) - 1080usize];
    ["Offset of field: H5AC_cache_config_t::lower_hr_threshold"]
        [::std::mem::offset_of!(H5AC_cache_config_t, lower_hr_threshold) - 1088usize];
    ["Offset of field: H5AC_cache_config_t::increment"]
        [::std::mem::offset_of!(H5AC_cache_config_t, increment) - 1096usize];
    ["Offset of field: H5AC_cache_config_t::apply_max_increment"]
        [::std::mem::offset_of!(H5AC_cache_config_t, apply_max_increment) - 1104usize];
    ["Offset of field: H5AC_cache_config_t::max_increment"]
        [::std::mem::offset_of!(H5AC_cache_config_t, max_increment) - 1112usize];
    ["Offset of field: H5AC_cache_config_t::flash_incr_mode"]
        [::std::mem::offset_of!(H5AC_cache_config_t, flash_incr_mode) - 1120usize];
    ["Offset of field: H5AC_cache_config_t::flash_multiple"]
        [::std::mem::offset_of!(H5AC_cache_config_t, flash_multiple) - 1128usize];
    ["Offset of field: H5AC_cache_config_t::flash_threshold"]
        [::std::mem::offset_of!(H5AC_cache_config_t, flash_threshold) - 1136usize];
    ["Offset of field: H5AC_cache_config_t::decr_mode"]
        [::std::mem::offset_of!(H5AC_cache_config_t, decr_mode) - 1144usize];
    ["Offset of field: H5AC_cache_config_t::upper_hr_threshold"]
        [::std::mem::offset_of!(H5AC_cache_config_t, upper_hr_threshold) - 1152usize];
    ["Offset of field: H5AC_cache_config_t::decrement"]
        [::std::mem::offset_of!(H5AC_cache_config_t, decrement) - 1160usize];
    ["Offset of field: H5AC_cache_config_t::apply_max_decrement"]
        [::std::mem::offset_of!(H5AC_cache_config_t, apply_max_decrement) - 1168usize];
    ["Offset of field: H5AC_cache_config_t::max_decrement"]
        [::std::mem::offset_of!(H5AC_cache_config_t, max_decrement) - 1176usize];
    ["Offset of field: H5AC_cache_config_t::epochs_before_eviction"]
        [::std::mem::offset_of!(H5AC_cache_config_t, epochs_before_eviction) - 1184usize];
    ["Offset of field: H5AC_cache_config_t::apply_empty_reserve"]
        [::std::mem::offset_of!(H5AC_cache_config_t, apply_empty_reserve) - 1188usize];
    ["Offset of field: H5AC_cache_config_t::empty_reserve"]
        [::std::mem::offset_of!(H5AC_cache_config_t, empty_reserve) - 1192usize];
    ["Offset of field: H5AC_cache_config_t::dirty_bytes_threshold"]
        [::std::mem::offset_of!(H5AC_cache_config_t, dirty_bytes_threshold) - 1200usize];
    ["Offset of field: H5AC_cache_config_t::metadata_write_strategy"]
        [::std::mem::offset_of!(H5AC_cache_config_t, metadata_write_strategy) - 1208usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5AC_cache_image_config_t {
    pub version: ::std::os::raw::c_int,
    pub generate_image: hbool_t,
    pub save_resize_status: hbool_t,
    pub entry_ageout: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5AC_cache_image_config_t"]
        [::std::mem::size_of::<H5AC_cache_image_config_t>() - 12usize];
    ["Alignment of H5AC_cache_image_config_t"]
        [::std::mem::align_of::<H5AC_cache_image_config_t>() - 4usize];
    ["Offset of field: H5AC_cache_image_config_t::version"]
        [::std::mem::offset_of!(H5AC_cache_image_config_t, version) - 0usize];
    ["Offset of field: H5AC_cache_image_config_t::generate_image"]
        [::std::mem::offset_of!(H5AC_cache_image_config_t, generate_image) - 4usize];
    ["Offset of field: H5AC_cache_image_config_t::save_resize_status"]
        [::std::mem::offset_of!(H5AC_cache_image_config_t, save_resize_status) - 5usize];
    ["Offset of field: H5AC_cache_image_config_t::entry_ageout"]
        [::std::mem::offset_of!(H5AC_cache_image_config_t, entry_ageout) - 8usize];
};
pub const H5D_layout_t_H5D_LAYOUT_ERROR: H5D_layout_t = -1;
pub const H5D_layout_t_H5D_COMPACT: H5D_layout_t = 0;
pub const H5D_layout_t_H5D_CONTIGUOUS: H5D_layout_t = 1;
pub const H5D_layout_t_H5D_CHUNKED: H5D_layout_t = 2;
pub const H5D_layout_t_H5D_VIRTUAL: H5D_layout_t = 3;
pub const H5D_layout_t_H5D_NLAYOUTS: H5D_layout_t = 4;
pub type H5D_layout_t = ::std::os::raw::c_int;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_BTREE: H5D_chunk_index_t = 0;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_SINGLE: H5D_chunk_index_t = 1;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_NONE: H5D_chunk_index_t = 2;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_FARRAY: H5D_chunk_index_t = 3;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_EARRAY: H5D_chunk_index_t = 4;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_BT2: H5D_chunk_index_t = 5;
pub const H5D_chunk_index_t_H5D_CHUNK_IDX_NTYPES: H5D_chunk_index_t = 6;
pub type H5D_chunk_index_t = ::std::os::raw::c_uint;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_ERROR: H5D_alloc_time_t = -1;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_DEFAULT: H5D_alloc_time_t = 0;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_EARLY: H5D_alloc_time_t = 1;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_LATE: H5D_alloc_time_t = 2;
pub const H5D_alloc_time_t_H5D_ALLOC_TIME_INCR: H5D_alloc_time_t = 3;
pub type H5D_alloc_time_t = ::std::os::raw::c_int;
pub const H5D_space_status_t_H5D_SPACE_STATUS_ERROR: H5D_space_status_t = -1;
pub const H5D_space_status_t_H5D_SPACE_STATUS_NOT_ALLOCATED: H5D_space_status_t = 0;
pub const H5D_space_status_t_H5D_SPACE_STATUS_PART_ALLOCATED: H5D_space_status_t = 1;
pub const H5D_space_status_t_H5D_SPACE_STATUS_ALLOCATED: H5D_space_status_t = 2;
pub type H5D_space_status_t = ::std::os::raw::c_int;
pub const H5D_fill_time_t_H5D_FILL_TIME_ERROR: H5D_fill_time_t = -1;
pub const H5D_fill_time_t_H5D_FILL_TIME_ALLOC: H5D_fill_time_t = 0;
pub const H5D_fill_time_t_H5D_FILL_TIME_NEVER: H5D_fill_time_t = 1;
pub const H5D_fill_time_t_H5D_FILL_TIME_IFSET: H5D_fill_time_t = 2;
pub type H5D_fill_time_t = ::std::os::raw::c_int;
pub const H5D_fill_value_t_H5D_FILL_VALUE_ERROR: H5D_fill_value_t = -1;
pub const H5D_fill_value_t_H5D_FILL_VALUE_UNDEFINED: H5D_fill_value_t = 0;
pub const H5D_fill_value_t_H5D_FILL_VALUE_DEFAULT: H5D_fill_value_t = 1;
pub const H5D_fill_value_t_H5D_FILL_VALUE_USER_DEFINED: H5D_fill_value_t = 2;
pub type H5D_fill_value_t = ::std::os::raw::c_int;
pub const H5D_vds_view_t_H5D_VDS_ERROR: H5D_vds_view_t = -1;
pub const H5D_vds_view_t_H5D_VDS_FIRST_MISSING: H5D_vds_view_t = 0;
pub const H5D_vds_view_t_H5D_VDS_LAST_AVAILABLE: H5D_vds_view_t = 1;
pub type H5D_vds_view_t = ::std::os::raw::c_int;
pub type H5D_append_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        dataset_id: hid_t,
        cur_dims: *mut hsize_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5D_operator_t = ::std::option::Option<
    unsafe extern "C" fn(
        elem: *mut ::std::os::raw::c_void,
        type_id: hid_t,
        ndim: ::std::os::raw::c_uint,
        point: *const hsize_t,
        operator_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5D_scatter_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        src_buf: *mut *const ::std::os::raw::c_void,
        src_buf_bytes_used: *mut usize,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5D_gather_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst_buf: *const ::std::os::raw::c_void,
        dst_buf_bytes_used: usize,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
extern "C" {
    pub fn H5Dcreate2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        lcpl_id: hid_t,
        dcpl_id: hid_t,
        dapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dcreate_anon(
        file_id: hid_t,
        type_id: hid_t,
        space_id: hid_t,
        plist_id: hid_t,
        dapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dopen2(file_id: hid_t, name: *const ::std::os::raw::c_char, dapl_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dclose(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dget_space(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_space_status(dset_id: hid_t, allocation: *mut H5D_space_status_t) -> herr_t;
}
extern "C" {
    pub fn H5Dget_type(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_create_plist(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_access_plist(dset_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Dget_storage_size(dset_id: hid_t) -> hsize_t;
}
extern "C" {
    pub fn H5Dget_chunk_storage_size(
        dset_id: hid_t,
        offset: *const hsize_t,
        chunk_bytes: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_num_chunks(dset_id: hid_t, fspace_id: hid_t, nchunks: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Dget_chunk_info_by_coord(
        dset_id: hid_t,
        coord: *const hsize_t,
        filter_mask: *mut ::std::os::raw::c_uint,
        addr: *mut haddr_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_chunk_info(
        dset_id: hid_t,
        fspace_id: hid_t,
        chk_idx: hsize_t,
        coord: *mut hsize_t,
        filter_mask: *mut ::std::os::raw::c_uint,
        addr: *mut haddr_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dget_offset(dset_id: hid_t) -> haddr_t;
}
extern "C" {
    pub fn H5Dread(
        dset_id: hid_t,
        mem_type_id: hid_t,
        mem_space_id: hid_t,
        file_space_id: hid_t,
        plist_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dwrite(
        dset_id: hid_t,
        mem_type_id: hid_t,
        mem_space_id: hid_t,
        file_space_id: hid_t,
        plist_id: hid_t,
        buf: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dwrite_chunk(
        dset_id: hid_t,
        dxpl_id: hid_t,
        filters: u32,
        offset: *const hsize_t,
        data_size: usize,
        buf: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dread_chunk(
        dset_id: hid_t,
        dxpl_id: hid_t,
        offset: *const hsize_t,
        filters: *mut u32,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Diterate(
        buf: *mut ::std::os::raw::c_void,
        type_id: hid_t,
        space_id: hid_t,
        op: H5D_operator_t,
        operator_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dvlen_reclaim(
        type_id: hid_t,
        space_id: hid_t,
        plist_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dvlen_get_buf_size(
        dataset_id: hid_t,
        type_id: hid_t,
        space_id: hid_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dfill(
        fill: *const ::std::os::raw::c_void,
        fill_type: hid_t,
        buf: *mut ::std::os::raw::c_void,
        buf_type: hid_t,
        space: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dset_extent(dset_id: hid_t, size: *const hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Dflush(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Drefresh(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dscatter(
        op: H5D_scatter_func_t,
        op_data: *mut ::std::os::raw::c_void,
        type_id: hid_t,
        dst_space_id: hid_t,
        dst_buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Dgather(
        src_space_id: hid_t,
        src_buf: *const ::std::os::raw::c_void,
        type_id: hid_t,
        dst_buf_size: usize,
        dst_buf: *mut ::std::os::raw::c_void,
        op: H5D_gather_func_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Ddebug(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dformat_convert(dset_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Dget_chunk_index_type(did: hid_t, idx_type: *mut H5D_chunk_index_t) -> herr_t;
}
extern "C" {
    pub fn H5Dcreate1(
        file_id: hid_t,
        name: *const ::std::os::raw::c_char,
        type_id: hid_t,
        space_id: hid_t,
        dcpl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Dopen1(file_id: hid_t, name: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn H5Dextend(dset_id: hid_t, size: *const hsize_t) -> herr_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const H5E_type_t_H5E_MAJOR: H5E_type_t = 0;
pub const H5E_type_t_H5E_MINOR: H5E_type_t = 1;
pub type H5E_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5E_error2_t {
    pub cls_id: hid_t,
    pub maj_num: hid_t,
    pub min_num: hid_t,
    pub line: ::std::os::raw::c_uint,
    pub func_name: *const ::std::os::raw::c_char,
    pub file_name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5E_error2_t"][::std::mem::size_of::<H5E_error2_t>() - 56usize];
    ["Alignment of H5E_error2_t"][::std::mem::align_of::<H5E_error2_t>() - 8usize];
    ["Offset of field: H5E_error2_t::cls_id"]
        [::std::mem::offset_of!(H5E_error2_t, cls_id) - 0usize];
    ["Offset of field: H5E_error2_t::maj_num"]
        [::std::mem::offset_of!(H5E_error2_t, maj_num) - 8usize];
    ["Offset of field: H5E_error2_t::min_num"]
        [::std::mem::offset_of!(H5E_error2_t, min_num) - 16usize];
    ["Offset of field: H5E_error2_t::line"][::std::mem::offset_of!(H5E_error2_t, line) - 24usize];
    ["Offset of field: H5E_error2_t::func_name"]
        [::std::mem::offset_of!(H5E_error2_t, func_name) - 32usize];
    ["Offset of field: H5E_error2_t::file_name"]
        [::std::mem::offset_of!(H5E_error2_t, file_name) - 40usize];
    ["Offset of field: H5E_error2_t::desc"][::std::mem::offset_of!(H5E_error2_t, desc) - 48usize];
};
extern "C" {
    pub static mut H5E_ERR_CLS_g: hid_t;
}
extern "C" {
    pub static mut H5E_FUNC_g: hid_t;
}
extern "C" {
    pub static mut H5E_FILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_SOHM_g: hid_t;
}
extern "C" {
    pub static mut H5E_SYM_g: hid_t;
}
extern "C" {
    pub static mut H5E_PLUGIN_g: hid_t;
}
extern "C" {
    pub static mut H5E_VFL_g: hid_t;
}
extern "C" {
    pub static mut H5E_INTERNAL_g: hid_t;
}
extern "C" {
    pub static mut H5E_BTREE_g: hid_t;
}
extern "C" {
    pub static mut H5E_REFERENCE_g: hid_t;
}
extern "C" {
    pub static mut H5E_DATASPACE_g: hid_t;
}
extern "C" {
    pub static mut H5E_RESOURCE_g: hid_t;
}
extern "C" {
    pub static mut H5E_RS_g: hid_t;
}
extern "C" {
    pub static mut H5E_FARRAY_g: hid_t;
}
extern "C" {
    pub static mut H5E_HEAP_g: hid_t;
}
extern "C" {
    pub static mut H5E_ATTR_g: hid_t;
}
extern "C" {
    pub static mut H5E_IO_g: hid_t;
}
extern "C" {
    pub static mut H5E_EFL_g: hid_t;
}
extern "C" {
    pub static mut H5E_TST_g: hid_t;
}
extern "C" {
    pub static mut H5E_PAGEBUF_g: hid_t;
}
extern "C" {
    pub static mut H5E_FSPACE_g: hid_t;
}
extern "C" {
    pub static mut H5E_DATASET_g: hid_t;
}
extern "C" {
    pub static mut H5E_STORAGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_LINK_g: hid_t;
}
extern "C" {
    pub static mut H5E_PLIST_g: hid_t;
}
extern "C" {
    pub static mut H5E_DATATYPE_g: hid_t;
}
extern "C" {
    pub static mut H5E_OHDR_g: hid_t;
}
extern "C" {
    pub static mut H5E_ATOM_g: hid_t;
}
extern "C" {
    pub static mut H5E_NONE_MAJOR_g: hid_t;
}
extern "C" {
    pub static mut H5E_SLIST_g: hid_t;
}
extern "C" {
    pub static mut H5E_ARGS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CONTEXT_g: hid_t;
}
extern "C" {
    pub static mut H5E_EARRAY_g: hid_t;
}
extern "C" {
    pub static mut H5E_PLINE_g: hid_t;
}
extern "C" {
    pub static mut H5E_ERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_CACHE_g: hid_t;
}
extern "C" {
    pub static mut H5E_SEEKERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_READERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_WRITEERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_CLOSEERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_OVERFLOW_g: hid_t;
}
extern "C" {
    pub static mut H5E_FCNTL_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOSPACE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTALLOC_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOPY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTFREE_g: hid_t;
}
extern "C" {
    pub static mut H5E_ALREADYEXISTS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLOCK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNLOCK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGC_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGETSIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_OBJOPEN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRESTORE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOMPUTE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTEXTEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTATTACH_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUPDATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTOPERATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINIT_g: hid_t;
}
extern "C" {
    pub static mut H5E_ALREADYINIT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRELEASE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGET_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSET_g: hid_t;
}
extern "C" {
    pub static mut H5E_DUPCLASS_g: hid_t;
}
extern "C" {
    pub static mut H5E_SETDISALLOWED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMERGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREVIVE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSHRINK_g: hid_t;
}
extern "C" {
    pub static mut H5E_LINKCOUNT_g: hid_t;
}
extern "C" {
    pub static mut H5E_VERSION_g: hid_t;
}
extern "C" {
    pub static mut H5E_ALIGNMENT_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADMESG_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDELETE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADITER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTPACK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRESET_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRENAME_g: hid_t;
}
extern "C" {
    pub static mut H5E_SYSERRSTR_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOFILTER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CALLBACK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANAPPLY_g: hid_t;
}
extern "C" {
    pub static mut H5E_SETLOCAL_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOENCODER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTFILTER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTOPENOBJ_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLOSEOBJ_g: hid_t;
}
extern "C" {
    pub static mut H5E_COMPLEN_g: hid_t;
}
extern "C" {
    pub static mut H5E_PATH_g: hid_t;
}
extern "C" {
    pub static mut H5E_NONE_MINOR_g: hid_t;
}
extern "C" {
    pub static mut H5E_OPENERROR_g: hid_t;
}
extern "C" {
    pub static mut H5E_FILEEXISTS_g: hid_t;
}
extern "C" {
    pub static mut H5E_FILEOPEN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCREATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTOPENFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLOSEFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTHDF5_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_TRUNCATED_g: hid_t;
}
extern "C" {
    pub static mut H5E_MOUNT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLOCKFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNLOCKFILE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADATOM_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADGROUP_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREGISTER_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINC_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDEC_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOIDS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTFLUSH_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNSERIALIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSERIALIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTTAG_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLOAD_g: hid_t;
}
extern "C" {
    pub static mut H5E_PROTECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTCACHED_g: hid_t;
}
extern "C" {
    pub static mut H5E_SYSTEM_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTPROTECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNPROTECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTPIN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNPIN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKDIRTY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKCLEAN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKUNSERIALIZED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMARKSERIALIZED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDIRTY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLEAN_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTEXPUNGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRESIZE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDEPEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNDEPEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTNOTIFY_g: hid_t;
}
extern "C" {
    pub static mut H5E_LOGGING_g: hid_t;
}
extern "C" {
    pub static mut H5E_LOGFAIL_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCORK_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTUNCORK_g: hid_t;
}
extern "C" {
    pub static mut H5E_TRAVERSE_g: hid_t;
}
extern "C" {
    pub static mut H5E_NLINKS_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTREGISTERED_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMOVE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSORT_g: hid_t;
}
extern "C" {
    pub static mut H5E_MPI_g: hid_t;
}
extern "C" {
    pub static mut H5E_MPIERRSTR_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTRECV_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTGATHER_g: hid_t;
}
extern "C" {
    pub static mut H5E_NO_INDEPENDENT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCLIP_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOUNT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSELECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTNEXT_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADSELECT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCOMPARE_g: hid_t;
}
extern "C" {
    pub static mut H5E_INCONSISTENTSTATE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTAPPEND_g: hid_t;
}
extern "C" {
    pub static mut H5E_UNINITIALIZED_g: hid_t;
}
extern "C" {
    pub static mut H5E_UNSUPPORTED_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADTYPE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADRANGE_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADVALUE_g: hid_t;
}
extern "C" {
    pub static mut H5E_NOTFOUND_g: hid_t;
}
extern "C" {
    pub static mut H5E_EXISTS_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTENCODE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTDECODE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSPLIT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREDISTRIBUTE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTSWAP_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTINSERT_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTLIST_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTMODIFY_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTREMOVE_g: hid_t;
}
extern "C" {
    pub static mut H5E_CANTCONVERT_g: hid_t;
}
extern "C" {
    pub static mut H5E_BADSIZE_g: hid_t;
}
pub const H5E_direction_t_H5E_WALK_UPWARD: H5E_direction_t = 0;
pub const H5E_direction_t_H5E_WALK_DOWNWARD: H5E_direction_t = 1;
pub type H5E_direction_t = ::std::os::raw::c_uint;
pub type H5E_walk2_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_uint,
        err_desc: *const H5E_error2_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5E_auto2_t = ::std::option::Option<
    unsafe extern "C" fn(estack: hid_t, client_data: *mut ::std::os::raw::c_void) -> herr_t,
>;
extern "C" {
    pub fn H5Eregister_class(
        cls_name: *const ::std::os::raw::c_char,
        lib_name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Eunregister_class(class_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Eclose_msg(err_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Ecreate_msg(
        cls: hid_t,
        msg_type: H5E_type_t,
        msg: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Ecreate_stack() -> hid_t;
}
extern "C" {
    pub fn H5Eget_current_stack() -> hid_t;
}
extern "C" {
    pub fn H5Eclose_stack(stack_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Eget_class_name(
        class_id: hid_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Eset_current_stack(err_stack_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Epush2(
        err_stack: hid_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
        cls_id: hid_t,
        maj_id: hid_t,
        min_id: hid_t,
        msg: *const ::std::os::raw::c_char,
        ...
    ) -> herr_t;
}
extern "C" {
    pub fn H5Epop(err_stack: hid_t, count: usize) -> herr_t;
}
extern "C" {
    pub fn H5Eprint2(err_stack: hid_t, stream: *mut FILE) -> herr_t;
}
extern "C" {
    pub fn H5Ewalk2(
        err_stack: hid_t,
        direction: H5E_direction_t,
        func: H5E_walk2_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eget_auto2(
        estack_id: hid_t,
        func: *mut H5E_auto2_t,
        client_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eset_auto2(
        estack_id: hid_t,
        func: H5E_auto2_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eclear2(err_stack: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Eauto_is_v2(err_stack: hid_t, is_stack: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Eget_msg(
        msg_id: hid_t,
        type_: *mut H5E_type_t,
        msg: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Eget_num(error_stack_id: hid_t) -> isize;
}
pub type H5E_major_t = hid_t;
pub type H5E_minor_t = hid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5E_error1_t {
    pub maj_num: H5E_major_t,
    pub min_num: H5E_minor_t,
    pub func_name: *const ::std::os::raw::c_char,
    pub file_name: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_uint,
    pub desc: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5E_error1_t"][::std::mem::size_of::<H5E_error1_t>() - 48usize];
    ["Alignment of H5E_error1_t"][::std::mem::align_of::<H5E_error1_t>() - 8usize];
    ["Offset of field: H5E_error1_t::maj_num"]
        [::std::mem::offset_of!(H5E_error1_t, maj_num) - 0usize];
    ["Offset of field: H5E_error1_t::min_num"]
        [::std::mem::offset_of!(H5E_error1_t, min_num) - 8usize];
    ["Offset of field: H5E_error1_t::func_name"]
        [::std::mem::offset_of!(H5E_error1_t, func_name) - 16usize];
    ["Offset of field: H5E_error1_t::file_name"]
        [::std::mem::offset_of!(H5E_error1_t, file_name) - 24usize];
    ["Offset of field: H5E_error1_t::line"][::std::mem::offset_of!(H5E_error1_t, line) - 32usize];
    ["Offset of field: H5E_error1_t::desc"][::std::mem::offset_of!(H5E_error1_t, desc) - 40usize];
};
pub type H5E_walk1_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        err_desc: *mut H5E_error1_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5E_auto1_t =
    ::std::option::Option<unsafe extern "C" fn(client_data: *mut ::std::os::raw::c_void) -> herr_t>;
extern "C" {
    pub fn H5Eclear1() -> herr_t;
}
extern "C" {
    pub fn H5Eget_auto1(
        func: *mut H5E_auto1_t,
        client_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Epush1(
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
        maj: H5E_major_t,
        min: H5E_minor_t,
        str_: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eprint1(stream: *mut FILE) -> herr_t;
}
extern "C" {
    pub fn H5Eset_auto1(func: H5E_auto1_t, client_data: *mut ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5Ewalk1(
        direction: H5E_direction_t,
        func: H5E_walk1_t,
        client_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Eget_major(maj: H5E_major_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Eget_minor(min: H5E_minor_t) -> *mut ::std::os::raw::c_char;
}
pub const H5F_scope_t_H5F_SCOPE_LOCAL: H5F_scope_t = 0;
pub const H5F_scope_t_H5F_SCOPE_GLOBAL: H5F_scope_t = 1;
pub type H5F_scope_t = ::std::os::raw::c_uint;
pub const H5F_close_degree_t_H5F_CLOSE_DEFAULT: H5F_close_degree_t = 0;
pub const H5F_close_degree_t_H5F_CLOSE_WEAK: H5F_close_degree_t = 1;
pub const H5F_close_degree_t_H5F_CLOSE_SEMI: H5F_close_degree_t = 2;
pub const H5F_close_degree_t_H5F_CLOSE_STRONG: H5F_close_degree_t = 3;
pub type H5F_close_degree_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t {
    pub super_: H5F_info2_t__bindgen_ty_1,
    pub free: H5F_info2_t__bindgen_ty_2,
    pub sohm: H5F_info2_t__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t__bindgen_ty_1 {
    pub version: ::std::os::raw::c_uint,
    pub super_size: hsize_t,
    pub super_ext_size: hsize_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_info2_t__bindgen_ty_1"]
        [::std::mem::size_of::<H5F_info2_t__bindgen_ty_1>() - 24usize];
    ["Alignment of H5F_info2_t__bindgen_ty_1"]
        [::std::mem::align_of::<H5F_info2_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_1::version"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_1, version) - 0usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_1::super_size"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_1, super_size) - 8usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_1::super_ext_size"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_1, super_ext_size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t__bindgen_ty_2 {
    pub version: ::std::os::raw::c_uint,
    pub meta_size: hsize_t,
    pub tot_space: hsize_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_info2_t__bindgen_ty_2"]
        [::std::mem::size_of::<H5F_info2_t__bindgen_ty_2>() - 24usize];
    ["Alignment of H5F_info2_t__bindgen_ty_2"]
        [::std::mem::align_of::<H5F_info2_t__bindgen_ty_2>() - 8usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_2::version"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_2, version) - 0usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_2::meta_size"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_2, meta_size) - 8usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_2::tot_space"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_2, tot_space) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info2_t__bindgen_ty_3 {
    pub version: ::std::os::raw::c_uint,
    pub hdr_size: hsize_t,
    pub msgs_info: H5_ih_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_info2_t__bindgen_ty_3"]
        [::std::mem::size_of::<H5F_info2_t__bindgen_ty_3>() - 32usize];
    ["Alignment of H5F_info2_t__bindgen_ty_3"]
        [::std::mem::align_of::<H5F_info2_t__bindgen_ty_3>() - 8usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_3::version"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_3, version) - 0usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_3::hdr_size"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_3, hdr_size) - 8usize];
    ["Offset of field: H5F_info2_t__bindgen_ty_3::msgs_info"]
        [::std::mem::offset_of!(H5F_info2_t__bindgen_ty_3, msgs_info) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_info2_t"][::std::mem::size_of::<H5F_info2_t>() - 80usize];
    ["Alignment of H5F_info2_t"][::std::mem::align_of::<H5F_info2_t>() - 8usize];
    ["Offset of field: H5F_info2_t::super_"][::std::mem::offset_of!(H5F_info2_t, super_) - 0usize];
    ["Offset of field: H5F_info2_t::free"][::std::mem::offset_of!(H5F_info2_t, free) - 24usize];
    ["Offset of field: H5F_info2_t::sohm"][::std::mem::offset_of!(H5F_info2_t, sohm) - 48usize];
};
pub const H5F_mem_t_H5FD_MEM_NOLIST: H5F_mem_t = -1;
pub const H5F_mem_t_H5FD_MEM_DEFAULT: H5F_mem_t = 0;
pub const H5F_mem_t_H5FD_MEM_SUPER: H5F_mem_t = 1;
pub const H5F_mem_t_H5FD_MEM_BTREE: H5F_mem_t = 2;
pub const H5F_mem_t_H5FD_MEM_DRAW: H5F_mem_t = 3;
pub const H5F_mem_t_H5FD_MEM_GHEAP: H5F_mem_t = 4;
pub const H5F_mem_t_H5FD_MEM_LHEAP: H5F_mem_t = 5;
pub const H5F_mem_t_H5FD_MEM_OHDR: H5F_mem_t = 6;
pub const H5F_mem_t_H5FD_MEM_NTYPES: H5F_mem_t = 7;
pub type H5F_mem_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_sect_info_t {
    pub addr: haddr_t,
    pub size: hsize_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_sect_info_t"][::std::mem::size_of::<H5F_sect_info_t>() - 16usize];
    ["Alignment of H5F_sect_info_t"][::std::mem::align_of::<H5F_sect_info_t>() - 8usize];
    ["Offset of field: H5F_sect_info_t::addr"]
        [::std::mem::offset_of!(H5F_sect_info_t, addr) - 0usize];
    ["Offset of field: H5F_sect_info_t::size"]
        [::std::mem::offset_of!(H5F_sect_info_t, size) - 8usize];
};
pub const H5F_libver_t_H5F_LIBVER_ERROR: H5F_libver_t = -1;
pub const H5F_libver_t_H5F_LIBVER_EARLIEST: H5F_libver_t = 0;
pub const H5F_libver_t_H5F_LIBVER_V18: H5F_libver_t = 1;
pub const H5F_libver_t_H5F_LIBVER_V110: H5F_libver_t = 2;
pub const H5F_libver_t_H5F_LIBVER_NBOUNDS: H5F_libver_t = 3;
pub type H5F_libver_t = ::std::os::raw::c_int;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_FSM_AGGR: H5F_fspace_strategy_t = 0;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_PAGE: H5F_fspace_strategy_t = 1;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_AGGR: H5F_fspace_strategy_t = 2;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_NONE: H5F_fspace_strategy_t = 3;
pub const H5F_fspace_strategy_t_H5F_FSPACE_STRATEGY_NTYPES: H5F_fspace_strategy_t = 4;
pub type H5F_fspace_strategy_t = ::std::os::raw::c_uint;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_DEFAULT: H5F_file_space_type_t = 0;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_ALL_PERSIST: H5F_file_space_type_t = 1;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_ALL: H5F_file_space_type_t = 2;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_AGGR_VFD: H5F_file_space_type_t = 3;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_VFD: H5F_file_space_type_t = 4;
pub const H5F_file_space_type_t_H5F_FILE_SPACE_NTYPES: H5F_file_space_type_t = 5;
pub type H5F_file_space_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_retry_info_t {
    pub nbins: ::std::os::raw::c_uint,
    pub retries: [*mut u32; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_retry_info_t"][::std::mem::size_of::<H5F_retry_info_t>() - 176usize];
    ["Alignment of H5F_retry_info_t"][::std::mem::align_of::<H5F_retry_info_t>() - 8usize];
    ["Offset of field: H5F_retry_info_t::nbins"]
        [::std::mem::offset_of!(H5F_retry_info_t, nbins) - 0usize];
    ["Offset of field: H5F_retry_info_t::retries"]
        [::std::mem::offset_of!(H5F_retry_info_t, retries) - 8usize];
};
pub type H5F_flush_cb_t = ::std::option::Option<
    unsafe extern "C" fn(object_id: hid_t, udata: *mut ::std::os::raw::c_void) -> herr_t,
>;
extern "C" {
    pub fn H5Fis_hdf5(filename: *const ::std::os::raw::c_char) -> htri_t;
}
extern "C" {
    pub fn H5Fcreate(
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        create_plist: hid_t,
        access_plist: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Fopen(
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        access_plist: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Freopen(file_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Fflush(object_id: hid_t, scope: H5F_scope_t) -> herr_t;
}
extern "C" {
    pub fn H5Fclose(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_create_plist(file_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Fget_access_plist(file_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Fget_intent(file_id: hid_t, intent: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Fget_obj_count(file_id: hid_t, types: ::std::os::raw::c_uint) -> isize;
}
extern "C" {
    pub fn H5Fget_obj_ids(
        file_id: hid_t,
        types: ::std::os::raw::c_uint,
        max_objs: usize,
        obj_id_list: *mut hid_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Fget_vfd_handle(
        file_id: hid_t,
        fapl: hid_t,
        file_handle: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fmount(
        loc: hid_t,
        name: *const ::std::os::raw::c_char,
        child: hid_t,
        plist: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Funmount(loc: hid_t, name: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Fget_freespace(file_id: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Fget_filesize(file_id: hid_t, size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_eoa(file_id: hid_t, eoa: *mut haddr_t) -> herr_t;
}
extern "C" {
    pub fn H5Fincrement_filesize(file_id: hid_t, increment: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_file_image(
        file_id: hid_t,
        buf_ptr: *mut ::std::os::raw::c_void,
        buf_len: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Fget_mdc_config(file_id: hid_t, config_ptr: *mut H5AC_cache_config_t) -> herr_t;
}
extern "C" {
    pub fn H5Fset_mdc_config(file_id: hid_t, config_ptr: *mut H5AC_cache_config_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_hit_rate(file_id: hid_t, hit_rate_ptr: *mut f64) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_size(
        file_id: hid_t,
        max_size_ptr: *mut usize,
        min_clean_size_ptr: *mut usize,
        cur_size_ptr: *mut usize,
        cur_num_entries_ptr: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Freset_mdc_hit_rate_stats(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_name(obj_id: hid_t, name: *mut ::std::os::raw::c_char, size: usize) -> isize;
}
extern "C" {
    pub fn H5Fget_info2(obj_id: hid_t, finfo: *mut H5F_info2_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_metadata_read_retry_info(file_id: hid_t, info: *mut H5F_retry_info_t) -> herr_t;
}
extern "C" {
    pub fn H5Fstart_swmr_write(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_free_sections(
        file_id: hid_t,
        type_: H5F_mem_t,
        nsects: usize,
        sect_info: *mut H5F_sect_info_t,
    ) -> isize;
}
extern "C" {
    pub fn H5Fclear_elink_file_cache(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fset_libver_bounds(file_id: hid_t, low: H5F_libver_t, high: H5F_libver_t) -> herr_t;
}
extern "C" {
    pub fn H5Fstart_mdc_logging(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fstop_mdc_logging(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_logging_status(
        file_id: hid_t,
        is_enabled: *mut hbool_t,
        is_currently_logging: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fformat_convert(fid: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Freset_page_buffering_stats(file_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Fget_page_buffering_stats(
        file_id: hid_t,
        accesses: *mut ::std::os::raw::c_uint,
        hits: *mut ::std::os::raw::c_uint,
        misses: *mut ::std::os::raw::c_uint,
        evictions: *mut ::std::os::raw::c_uint,
        bypasses: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_mdc_image_info(
        file_id: hid_t,
        image_addr: *mut haddr_t,
        image_size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Fget_dset_no_attrs_hint(file_id: hid_t, minimize: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Fset_dset_no_attrs_hint(file_id: hid_t, minimize: hbool_t) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info1_t {
    pub super_ext_size: hsize_t,
    pub sohm: H5F_info1_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5F_info1_t__bindgen_ty_1 {
    pub hdr_size: hsize_t,
    pub msgs_info: H5_ih_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_info1_t__bindgen_ty_1"]
        [::std::mem::size_of::<H5F_info1_t__bindgen_ty_1>() - 24usize];
    ["Alignment of H5F_info1_t__bindgen_ty_1"]
        [::std::mem::align_of::<H5F_info1_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: H5F_info1_t__bindgen_ty_1::hdr_size"]
        [::std::mem::offset_of!(H5F_info1_t__bindgen_ty_1, hdr_size) - 0usize];
    ["Offset of field: H5F_info1_t__bindgen_ty_1::msgs_info"]
        [::std::mem::offset_of!(H5F_info1_t__bindgen_ty_1, msgs_info) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5F_info1_t"][::std::mem::size_of::<H5F_info1_t>() - 32usize];
    ["Alignment of H5F_info1_t"][::std::mem::align_of::<H5F_info1_t>() - 8usize];
    ["Offset of field: H5F_info1_t::super_ext_size"]
        [::std::mem::offset_of!(H5F_info1_t, super_ext_size) - 0usize];
    ["Offset of field: H5F_info1_t::sohm"][::std::mem::offset_of!(H5F_info1_t, sohm) - 8usize];
};
extern "C" {
    pub fn H5Fget_info1(obj_id: hid_t, finfo: *mut H5F_info1_t) -> herr_t;
}
extern "C" {
    pub fn H5Fset_latest_format(file_id: hid_t, latest_format: hbool_t) -> herr_t;
}
pub use self::H5F_mem_t as H5FD_mem_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_class_t {
    pub name: *const ::std::os::raw::c_char,
    pub maxaddr: haddr_t,
    pub fc_degree: H5F_close_degree_t,
    pub terminate: ::std::option::Option<unsafe extern "C" fn() -> herr_t>,
    pub sb_size: ::std::option::Option<unsafe extern "C" fn(file: *mut H5FD_t) -> hsize_t>,
    pub sb_encode: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            name: *mut ::std::os::raw::c_char,
            p: *mut ::std::os::raw::c_uchar,
        ) -> herr_t,
    >,
    pub sb_decode: ::std::option::Option<
        unsafe extern "C" fn(
            f: *mut H5FD_t,
            name: *const ::std::os::raw::c_char,
            p: *const ::std::os::raw::c_uchar,
        ) -> herr_t,
    >,
    pub fapl_size: usize,
    pub fapl_get: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t) -> *mut ::std::os::raw::c_void,
    >,
    pub fapl_copy: ::std::option::Option<
        unsafe extern "C" fn(fapl: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub fapl_free:
        ::std::option::Option<unsafe extern "C" fn(fapl: *mut ::std::os::raw::c_void) -> herr_t>,
    pub dxpl_size: usize,
    pub dxpl_copy: ::std::option::Option<
        unsafe extern "C" fn(dxpl: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub dxpl_free:
        ::std::option::Option<unsafe extern "C" fn(dxpl: *mut ::std::os::raw::c_void) -> herr_t>,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_uint,
            fapl: hid_t,
            maxaddr: haddr_t,
        ) -> *mut H5FD_t,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(file: *mut H5FD_t) -> herr_t>,
    pub cmp: ::std::option::Option<
        unsafe extern "C" fn(f1: *const H5FD_t, f2: *const H5FD_t) -> ::std::os::raw::c_int,
    >,
    pub query: ::std::option::Option<
        unsafe extern "C" fn(f1: *const H5FD_t, flags: *mut ::std::os::raw::c_ulong) -> herr_t,
    >,
    pub get_type_map: ::std::option::Option<
        unsafe extern "C" fn(file: *const H5FD_t, type_map: *mut H5FD_mem_t) -> herr_t,
    >,
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl_id: hid_t,
            size: hsize_t,
        ) -> haddr_t,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl_id: hid_t,
            addr: haddr_t,
            size: hsize_t,
        ) -> herr_t,
    >,
    pub get_eoa: ::std::option::Option<
        unsafe extern "C" fn(file: *const H5FD_t, type_: H5FD_mem_t) -> haddr_t,
    >,
    pub set_eoa: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t, type_: H5FD_mem_t, addr: haddr_t) -> herr_t,
    >,
    pub get_eof: ::std::option::Option<
        unsafe extern "C" fn(file: *const H5FD_t, type_: H5FD_mem_t) -> haddr_t,
    >,
    pub get_handle: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            fapl: hid_t,
            file_handle: *mut *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl: hid_t,
            addr: haddr_t,
            size: usize,
            buffer: *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            file: *mut H5FD_t,
            type_: H5FD_mem_t,
            dxpl: hid_t,
            addr: haddr_t,
            size: usize,
            buffer: *const ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t, dxpl_id: hid_t, closing: hbool_t) -> herr_t,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(file: *mut H5FD_t, dxpl_id: hid_t, closing: hbool_t) -> herr_t,
    >,
    pub lock: ::std::option::Option<unsafe extern "C" fn(file: *mut H5FD_t, rw: hbool_t) -> herr_t>,
    pub unlock: ::std::option::Option<unsafe extern "C" fn(file: *mut H5FD_t) -> herr_t>,
    pub fl_map: [H5FD_mem_t; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5FD_class_t"][::std::mem::size_of::<H5FD_class_t>() - 280usize];
    ["Alignment of H5FD_class_t"][::std::mem::align_of::<H5FD_class_t>() - 8usize];
    ["Offset of field: H5FD_class_t::name"][::std::mem::offset_of!(H5FD_class_t, name) - 0usize];
    ["Offset of field: H5FD_class_t::maxaddr"]
        [::std::mem::offset_of!(H5FD_class_t, maxaddr) - 8usize];
    ["Offset of field: H5FD_class_t::fc_degree"]
        [::std::mem::offset_of!(H5FD_class_t, fc_degree) - 16usize];
    ["Offset of field: H5FD_class_t::terminate"]
        [::std::mem::offset_of!(H5FD_class_t, terminate) - 24usize];
    ["Offset of field: H5FD_class_t::sb_size"]
        [::std::mem::offset_of!(H5FD_class_t, sb_size) - 32usize];
    ["Offset of field: H5FD_class_t::sb_encode"]
        [::std::mem::offset_of!(H5FD_class_t, sb_encode) - 40usize];
    ["Offset of field: H5FD_class_t::sb_decode"]
        [::std::mem::offset_of!(H5FD_class_t, sb_decode) - 48usize];
    ["Offset of field: H5FD_class_t::fapl_size"]
        [::std::mem::offset_of!(H5FD_class_t, fapl_size) - 56usize];
    ["Offset of field: H5FD_class_t::fapl_get"]
        [::std::mem::offset_of!(H5FD_class_t, fapl_get) - 64usize];
    ["Offset of field: H5FD_class_t::fapl_copy"]
        [::std::mem::offset_of!(H5FD_class_t, fapl_copy) - 72usize];
    ["Offset of field: H5FD_class_t::fapl_free"]
        [::std::mem::offset_of!(H5FD_class_t, fapl_free) - 80usize];
    ["Offset of field: H5FD_class_t::dxpl_size"]
        [::std::mem::offset_of!(H5FD_class_t, dxpl_size) - 88usize];
    ["Offset of field: H5FD_class_t::dxpl_copy"]
        [::std::mem::offset_of!(H5FD_class_t, dxpl_copy) - 96usize];
    ["Offset of field: H5FD_class_t::dxpl_free"]
        [::std::mem::offset_of!(H5FD_class_t, dxpl_free) - 104usize];
    ["Offset of field: H5FD_class_t::open"][::std::mem::offset_of!(H5FD_class_t, open) - 112usize];
    ["Offset of field: H5FD_class_t::close"]
        [::std::mem::offset_of!(H5FD_class_t, close) - 120usize];
    ["Offset of field: H5FD_class_t::cmp"][::std::mem::offset_of!(H5FD_class_t, cmp) - 128usize];
    ["Offset of field: H5FD_class_t::query"]
        [::std::mem::offset_of!(H5FD_class_t, query) - 136usize];
    ["Offset of field: H5FD_class_t::get_type_map"]
        [::std::mem::offset_of!(H5FD_class_t, get_type_map) - 144usize];
    ["Offset of field: H5FD_class_t::alloc"]
        [::std::mem::offset_of!(H5FD_class_t, alloc) - 152usize];
    ["Offset of field: H5FD_class_t::free"][::std::mem::offset_of!(H5FD_class_t, free) - 160usize];
    ["Offset of field: H5FD_class_t::get_eoa"]
        [::std::mem::offset_of!(H5FD_class_t, get_eoa) - 168usize];
    ["Offset of field: H5FD_class_t::set_eoa"]
        [::std::mem::offset_of!(H5FD_class_t, set_eoa) - 176usize];
    ["Offset of field: H5FD_class_t::get_eof"]
        [::std::mem::offset_of!(H5FD_class_t, get_eof) - 184usize];
    ["Offset of field: H5FD_class_t::get_handle"]
        [::std::mem::offset_of!(H5FD_class_t, get_handle) - 192usize];
    ["Offset of field: H5FD_class_t::read"][::std::mem::offset_of!(H5FD_class_t, read) - 200usize];
    ["Offset of field: H5FD_class_t::write"]
        [::std::mem::offset_of!(H5FD_class_t, write) - 208usize];
    ["Offset of field: H5FD_class_t::flush"]
        [::std::mem::offset_of!(H5FD_class_t, flush) - 216usize];
    ["Offset of field: H5FD_class_t::truncate"]
        [::std::mem::offset_of!(H5FD_class_t, truncate) - 224usize];
    ["Offset of field: H5FD_class_t::lock"][::std::mem::offset_of!(H5FD_class_t, lock) - 232usize];
    ["Offset of field: H5FD_class_t::unlock"]
        [::std::mem::offset_of!(H5FD_class_t, unlock) - 240usize];
    ["Offset of field: H5FD_class_t::fl_map"]
        [::std::mem::offset_of!(H5FD_class_t, fl_map) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_free_t {
    pub addr: haddr_t,
    pub size: hsize_t,
    pub next: *mut H5FD_free_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5FD_free_t"][::std::mem::size_of::<H5FD_free_t>() - 24usize];
    ["Alignment of H5FD_free_t"][::std::mem::align_of::<H5FD_free_t>() - 8usize];
    ["Offset of field: H5FD_free_t::addr"][::std::mem::offset_of!(H5FD_free_t, addr) - 0usize];
    ["Offset of field: H5FD_free_t::size"][::std::mem::offset_of!(H5FD_free_t, size) - 8usize];
    ["Offset of field: H5FD_free_t::next"][::std::mem::offset_of!(H5FD_free_t, next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_t {
    pub driver_id: hid_t,
    pub cls: *const H5FD_class_t,
    pub fileno: ::std::os::raw::c_ulong,
    pub access_flags: ::std::os::raw::c_uint,
    pub feature_flags: ::std::os::raw::c_ulong,
    pub maxaddr: haddr_t,
    pub base_addr: haddr_t,
    pub threshold: hsize_t,
    pub alignment: hsize_t,
    pub paged_aggr: hbool_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5FD_t"][::std::mem::size_of::<H5FD_t>() - 80usize];
    ["Alignment of H5FD_t"][::std::mem::align_of::<H5FD_t>() - 8usize];
    ["Offset of field: H5FD_t::driver_id"][::std::mem::offset_of!(H5FD_t, driver_id) - 0usize];
    ["Offset of field: H5FD_t::cls"][::std::mem::offset_of!(H5FD_t, cls) - 8usize];
    ["Offset of field: H5FD_t::fileno"][::std::mem::offset_of!(H5FD_t, fileno) - 16usize];
    ["Offset of field: H5FD_t::access_flags"]
        [::std::mem::offset_of!(H5FD_t, access_flags) - 24usize];
    ["Offset of field: H5FD_t::feature_flags"]
        [::std::mem::offset_of!(H5FD_t, feature_flags) - 32usize];
    ["Offset of field: H5FD_t::maxaddr"][::std::mem::offset_of!(H5FD_t, maxaddr) - 40usize];
    ["Offset of field: H5FD_t::base_addr"][::std::mem::offset_of!(H5FD_t, base_addr) - 48usize];
    ["Offset of field: H5FD_t::threshold"][::std::mem::offset_of!(H5FD_t, threshold) - 56usize];
    ["Offset of field: H5FD_t::alignment"][::std::mem::offset_of!(H5FD_t, alignment) - 64usize];
    ["Offset of field: H5FD_t::paged_aggr"][::std::mem::offset_of!(H5FD_t, paged_aggr) - 72usize];
};
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_NO_OP: H5FD_file_image_op_t = 0;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET: H5FD_file_image_op_t = 1;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY: H5FD_file_image_op_t = 2;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET: H5FD_file_image_op_t = 3;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE: H5FD_file_image_op_t = 4;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_FILE_OPEN: H5FD_file_image_op_t = 5;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_FILE_RESIZE: H5FD_file_image_op_t = 6;
pub const H5FD_file_image_op_t_H5FD_FILE_IMAGE_OP_FILE_CLOSE: H5FD_file_image_op_t = 7;
pub type H5FD_file_image_op_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_file_image_callbacks_t {
    pub image_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub image_memcpy: ::std::option::Option<
        unsafe extern "C" fn(
            dest: *mut ::std::os::raw::c_void,
            src: *const ::std::os::raw::c_void,
            size: usize,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub image_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub image_free: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            file_image_op: H5FD_file_image_op_t,
            udata: *mut ::std::os::raw::c_void,
        ) -> herr_t,
    >,
    pub udata_copy: ::std::option::Option<
        unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub udata_free:
        ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void) -> herr_t>,
    pub udata: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5FD_file_image_callbacks_t"]
        [::std::mem::size_of::<H5FD_file_image_callbacks_t>() - 56usize];
    ["Alignment of H5FD_file_image_callbacks_t"]
        [::std::mem::align_of::<H5FD_file_image_callbacks_t>() - 8usize];
    ["Offset of field: H5FD_file_image_callbacks_t::image_malloc"]
        [::std::mem::offset_of!(H5FD_file_image_callbacks_t, image_malloc) - 0usize];
    ["Offset of field: H5FD_file_image_callbacks_t::image_memcpy"]
        [::std::mem::offset_of!(H5FD_file_image_callbacks_t, image_memcpy) - 8usize];
    ["Offset of field: H5FD_file_image_callbacks_t::image_realloc"]
        [::std::mem::offset_of!(H5FD_file_image_callbacks_t, image_realloc) - 16usize];
    ["Offset of field: H5FD_file_image_callbacks_t::image_free"]
        [::std::mem::offset_of!(H5FD_file_image_callbacks_t, image_free) - 24usize];
    ["Offset of field: H5FD_file_image_callbacks_t::udata_copy"]
        [::std::mem::offset_of!(H5FD_file_image_callbacks_t, udata_copy) - 32usize];
    ["Offset of field: H5FD_file_image_callbacks_t::udata_free"]
        [::std::mem::offset_of!(H5FD_file_image_callbacks_t, udata_free) - 40usize];
    ["Offset of field: H5FD_file_image_callbacks_t::udata"]
        [::std::mem::offset_of!(H5FD_file_image_callbacks_t, udata) - 48usize];
};
extern "C" {
    pub fn H5FDregister(cls: *const H5FD_class_t) -> hid_t;
}
extern "C" {
    pub fn H5FDunregister(driver_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5FDopen(
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        fapl_id: hid_t,
        maxaddr: haddr_t,
    ) -> *mut H5FD_t;
}
extern "C" {
    pub fn H5FDclose(file: *mut H5FD_t) -> herr_t;
}
extern "C" {
    pub fn H5FDcmp(f1: *const H5FD_t, f2: *const H5FD_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5FDquery(
        f: *const H5FD_t,
        flags: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5FDalloc(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        size: hsize_t,
    ) -> haddr_t;
}
extern "C" {
    pub fn H5FDfree(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        addr: haddr_t,
        size: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDget_eoa(file: *mut H5FD_t, type_: H5FD_mem_t) -> haddr_t;
}
extern "C" {
    pub fn H5FDset_eoa(file: *mut H5FD_t, type_: H5FD_mem_t, eoa: haddr_t) -> herr_t;
}
extern "C" {
    pub fn H5FDget_eof(file: *mut H5FD_t, type_: H5FD_mem_t) -> haddr_t;
}
extern "C" {
    pub fn H5FDget_vfd_handle(
        file: *mut H5FD_t,
        fapl: hid_t,
        file_handle: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDread(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        addr: haddr_t,
        size: usize,
        buf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDwrite(
        file: *mut H5FD_t,
        type_: H5FD_mem_t,
        dxpl_id: hid_t,
        addr: haddr_t,
        size: usize,
        buf: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FDflush(file: *mut H5FD_t, dxpl_id: hid_t, closing: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5FDtruncate(file: *mut H5FD_t, dxpl_id: hid_t, closing: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5FDlock(file: *mut H5FD_t, rw: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5FDunlock(file: *mut H5FD_t) -> herr_t;
}
extern "C" {
    pub fn H5FDdriver_query(driver_id: hid_t, flags: *mut ::std::os::raw::c_ulong) -> herr_t;
}
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_UNKNOWN: H5G_storage_type_t = -1;
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_SYMBOL_TABLE: H5G_storage_type_t = 0;
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_COMPACT: H5G_storage_type_t = 1;
pub const H5G_storage_type_t_H5G_STORAGE_TYPE_DENSE: H5G_storage_type_t = 2;
pub type H5G_storage_type_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5G_info_t {
    pub storage_type: H5G_storage_type_t,
    pub nlinks: hsize_t,
    pub max_corder: i64,
    pub mounted: hbool_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5G_info_t"][::std::mem::size_of::<H5G_info_t>() - 32usize];
    ["Alignment of H5G_info_t"][::std::mem::align_of::<H5G_info_t>() - 8usize];
    ["Offset of field: H5G_info_t::storage_type"]
        [::std::mem::offset_of!(H5G_info_t, storage_type) - 0usize];
    ["Offset of field: H5G_info_t::nlinks"][::std::mem::offset_of!(H5G_info_t, nlinks) - 8usize];
    ["Offset of field: H5G_info_t::max_corder"]
        [::std::mem::offset_of!(H5G_info_t, max_corder) - 16usize];
    ["Offset of field: H5G_info_t::mounted"][::std::mem::offset_of!(H5G_info_t, mounted) - 24usize];
};
extern "C" {
    pub fn H5Gcreate2(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        lcpl_id: hid_t,
        gcpl_id: hid_t,
        gapl_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gcreate_anon(loc_id: hid_t, gcpl_id: hid_t, gapl_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Gopen2(loc_id: hid_t, name: *const ::std::os::raw::c_char, gapl_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Gget_create_plist(group_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Gget_info(loc_id: hid_t, ginfo: *mut H5G_info_t) -> herr_t;
}
extern "C" {
    pub fn H5Gget_info_by_name(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        ginfo: *mut H5G_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_info_by_idx(
        loc_id: hid_t,
        group_name: *const ::std::os::raw::c_char,
        idx_type: H5_index_t,
        order: H5_iter_order_t,
        n: hsize_t,
        ginfo: *mut H5G_info_t,
        lapl_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gclose(group_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Gflush(group_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Grefresh(group_id: hid_t) -> herr_t;
}
pub const H5G_obj_t_H5G_UNKNOWN: H5G_obj_t = -1;
pub const H5G_obj_t_H5G_GROUP: H5G_obj_t = 0;
pub const H5G_obj_t_H5G_DATASET: H5G_obj_t = 1;
pub const H5G_obj_t_H5G_TYPE: H5G_obj_t = 2;
pub const H5G_obj_t_H5G_LINK: H5G_obj_t = 3;
pub const H5G_obj_t_H5G_UDLINK: H5G_obj_t = 4;
pub const H5G_obj_t_H5G_RESERVED_5: H5G_obj_t = 5;
pub const H5G_obj_t_H5G_RESERVED_6: H5G_obj_t = 6;
pub const H5G_obj_t_H5G_RESERVED_7: H5G_obj_t = 7;
pub type H5G_obj_t = ::std::os::raw::c_int;
pub type H5G_iterate_t = ::std::option::Option<
    unsafe extern "C" fn(
        group: hid_t,
        name: *const ::std::os::raw::c_char,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5G_stat_t {
    pub fileno: [::std::os::raw::c_ulong; 2usize],
    pub objno: [::std::os::raw::c_ulong; 2usize],
    pub nlink: ::std::os::raw::c_uint,
    pub type_: H5G_obj_t,
    pub mtime: time_t,
    pub linklen: usize,
    pub ohdr: H5O_stat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5G_stat_t"][::std::mem::size_of::<H5G_stat_t>() - 80usize];
    ["Alignment of H5G_stat_t"][::std::mem::align_of::<H5G_stat_t>() - 8usize];
    ["Offset of field: H5G_stat_t::fileno"][::std::mem::offset_of!(H5G_stat_t, fileno) - 0usize];
    ["Offset of field: H5G_stat_t::objno"][::std::mem::offset_of!(H5G_stat_t, objno) - 16usize];
    ["Offset of field: H5G_stat_t::nlink"][::std::mem::offset_of!(H5G_stat_t, nlink) - 32usize];
    ["Offset of field: H5G_stat_t::type_"][::std::mem::offset_of!(H5G_stat_t, type_) - 36usize];
    ["Offset of field: H5G_stat_t::mtime"][::std::mem::offset_of!(H5G_stat_t, mtime) - 40usize];
    ["Offset of field: H5G_stat_t::linklen"][::std::mem::offset_of!(H5G_stat_t, linklen) - 48usize];
    ["Offset of field: H5G_stat_t::ohdr"][::std::mem::offset_of!(H5G_stat_t, ohdr) - 56usize];
};
extern "C" {
    pub fn H5Gcreate1(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size_hint: usize,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Gopen1(loc_id: hid_t, name: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn H5Glink(
        cur_loc_id: hid_t,
        type_: H5L_type_t,
        cur_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Glink2(
        cur_loc_id: hid_t,
        cur_name: *const ::std::os::raw::c_char,
        type_: H5L_type_t,
        new_loc_id: hid_t,
        new_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gmove(
        src_loc_id: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gmove2(
        src_loc_id: hid_t,
        src_name: *const ::std::os::raw::c_char,
        dst_loc_id: hid_t,
        dst_name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gunlink(loc_id: hid_t, name: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Gget_linkval(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gset_comment(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        comment: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_comment(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        bufsize: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Giterate(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        idx: *mut ::std::os::raw::c_int,
        op: H5G_iterate_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_num_objs(loc_id: hid_t, num_objs: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Gget_objinfo(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        follow_link: hbool_t,
        statbuf: *mut H5G_stat_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Gget_objname_by_idx(
        loc_id: hid_t,
        idx: hsize_t,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Gget_objtype_by_idx(loc_id: hid_t, idx: hsize_t) -> H5G_obj_t;
}
pub type H5MM_allocate_t = ::std::option::Option<
    unsafe extern "C" fn(
        size: usize,
        alloc_info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type H5MM_free_t = ::std::option::Option<
    unsafe extern "C" fn(mem: *mut ::std::os::raw::c_void, free_info: *mut ::std::os::raw::c_void),
>;
pub type H5Z_filter_t = ::std::os::raw::c_int;
pub const H5Z_SO_scale_type_t_H5Z_SO_FLOAT_DSCALE: H5Z_SO_scale_type_t = 0;
pub const H5Z_SO_scale_type_t_H5Z_SO_FLOAT_ESCALE: H5Z_SO_scale_type_t = 1;
pub const H5Z_SO_scale_type_t_H5Z_SO_INT: H5Z_SO_scale_type_t = 2;
pub type H5Z_SO_scale_type_t = ::std::os::raw::c_uint;
pub const H5Z_EDC_t_H5Z_ERROR_EDC: H5Z_EDC_t = -1;
pub const H5Z_EDC_t_H5Z_DISABLE_EDC: H5Z_EDC_t = 0;
pub const H5Z_EDC_t_H5Z_ENABLE_EDC: H5Z_EDC_t = 1;
pub const H5Z_EDC_t_H5Z_NO_EDC: H5Z_EDC_t = 2;
pub type H5Z_EDC_t = ::std::os::raw::c_int;
pub const H5Z_cb_return_t_H5Z_CB_ERROR: H5Z_cb_return_t = -1;
pub const H5Z_cb_return_t_H5Z_CB_FAIL: H5Z_cb_return_t = 0;
pub const H5Z_cb_return_t_H5Z_CB_CONT: H5Z_cb_return_t = 1;
pub const H5Z_cb_return_t_H5Z_CB_NO: H5Z_cb_return_t = 2;
pub type H5Z_cb_return_t = ::std::os::raw::c_int;
pub type H5Z_filter_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        filter: H5Z_filter_t,
        buf: *mut ::std::os::raw::c_void,
        buf_size: usize,
        op_data: *mut ::std::os::raw::c_void,
    ) -> H5Z_cb_return_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5Z_cb_t {
    pub func: H5Z_filter_func_t,
    pub op_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5Z_cb_t"][::std::mem::size_of::<H5Z_cb_t>() - 16usize];
    ["Alignment of H5Z_cb_t"][::std::mem::align_of::<H5Z_cb_t>() - 8usize];
    ["Offset of field: H5Z_cb_t::func"][::std::mem::offset_of!(H5Z_cb_t, func) - 0usize];
    ["Offset of field: H5Z_cb_t::op_data"][::std::mem::offset_of!(H5Z_cb_t, op_data) - 8usize];
};
pub type H5Z_can_apply_func_t = ::std::option::Option<
    unsafe extern "C" fn(dcpl_id: hid_t, type_id: hid_t, space_id: hid_t) -> htri_t,
>;
pub type H5Z_set_local_func_t = ::std::option::Option<
    unsafe extern "C" fn(dcpl_id: hid_t, type_id: hid_t, space_id: hid_t) -> herr_t,
>;
pub type H5Z_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        flags: ::std::os::raw::c_uint,
        cd_nelmts: usize,
        cd_values: *const ::std::os::raw::c_uint,
        nbytes: usize,
        buf_size: *mut usize,
        buf: *mut *mut ::std::os::raw::c_void,
    ) -> usize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5Z_class2_t {
    pub version: ::std::os::raw::c_int,
    pub id: H5Z_filter_t,
    pub encoder_present: ::std::os::raw::c_uint,
    pub decoder_present: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub can_apply: H5Z_can_apply_func_t,
    pub set_local: H5Z_set_local_func_t,
    pub filter: H5Z_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5Z_class2_t"][::std::mem::size_of::<H5Z_class2_t>() - 48usize];
    ["Alignment of H5Z_class2_t"][::std::mem::align_of::<H5Z_class2_t>() - 8usize];
    ["Offset of field: H5Z_class2_t::version"]
        [::std::mem::offset_of!(H5Z_class2_t, version) - 0usize];
    ["Offset of field: H5Z_class2_t::id"][::std::mem::offset_of!(H5Z_class2_t, id) - 4usize];
    ["Offset of field: H5Z_class2_t::encoder_present"]
        [::std::mem::offset_of!(H5Z_class2_t, encoder_present) - 8usize];
    ["Offset of field: H5Z_class2_t::decoder_present"]
        [::std::mem::offset_of!(H5Z_class2_t, decoder_present) - 12usize];
    ["Offset of field: H5Z_class2_t::name"][::std::mem::offset_of!(H5Z_class2_t, name) - 16usize];
    ["Offset of field: H5Z_class2_t::can_apply"]
        [::std::mem::offset_of!(H5Z_class2_t, can_apply) - 24usize];
    ["Offset of field: H5Z_class2_t::set_local"]
        [::std::mem::offset_of!(H5Z_class2_t, set_local) - 32usize];
    ["Offset of field: H5Z_class2_t::filter"]
        [::std::mem::offset_of!(H5Z_class2_t, filter) - 40usize];
};
extern "C" {
    pub fn H5Zregister(cls: *const ::std::os::raw::c_void) -> herr_t;
}
extern "C" {
    pub fn H5Zunregister(id: H5Z_filter_t) -> herr_t;
}
extern "C" {
    pub fn H5Zfilter_avail(id: H5Z_filter_t) -> htri_t;
}
extern "C" {
    pub fn H5Zget_filter_info(
        filter: H5Z_filter_t,
        filter_config_flags: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5Z_class1_t {
    pub id: H5Z_filter_t,
    pub name: *const ::std::os::raw::c_char,
    pub can_apply: H5Z_can_apply_func_t,
    pub set_local: H5Z_set_local_func_t,
    pub filter: H5Z_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5Z_class1_t"][::std::mem::size_of::<H5Z_class1_t>() - 40usize];
    ["Alignment of H5Z_class1_t"][::std::mem::align_of::<H5Z_class1_t>() - 8usize];
    ["Offset of field: H5Z_class1_t::id"][::std::mem::offset_of!(H5Z_class1_t, id) - 0usize];
    ["Offset of field: H5Z_class1_t::name"][::std::mem::offset_of!(H5Z_class1_t, name) - 8usize];
    ["Offset of field: H5Z_class1_t::can_apply"]
        [::std::mem::offset_of!(H5Z_class1_t, can_apply) - 16usize];
    ["Offset of field: H5Z_class1_t::set_local"]
        [::std::mem::offset_of!(H5Z_class1_t, set_local) - 24usize];
    ["Offset of field: H5Z_class1_t::filter"]
        [::std::mem::offset_of!(H5Z_class1_t, filter) - 32usize];
};
pub type H5P_cls_create_func_t = ::std::option::Option<
    unsafe extern "C" fn(prop_id: hid_t, create_data: *mut ::std::os::raw::c_void) -> herr_t,
>;
pub type H5P_cls_copy_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        new_prop_id: hid_t,
        old_prop_id: hid_t,
        copy_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_cls_close_func_t = ::std::option::Option<
    unsafe extern "C" fn(prop_id: hid_t, close_data: *mut ::std::os::raw::c_void) -> herr_t,
>;
pub type H5P_prp_cb1_t = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_prp_cb2_t = ::std::option::Option<
    unsafe extern "C" fn(
        prop_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub type H5P_prp_create_func_t = H5P_prp_cb1_t;
pub type H5P_prp_set_func_t = H5P_prp_cb2_t;
pub type H5P_prp_get_func_t = H5P_prp_cb2_t;
pub type H5P_prp_delete_func_t = H5P_prp_cb2_t;
pub type H5P_prp_copy_func_t = H5P_prp_cb1_t;
pub type H5P_prp_compare_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type H5P_prp_close_func_t = H5P_prp_cb1_t;
pub type H5P_iterate_t = ::std::option::Option<
    unsafe extern "C" fn(
        id: hid_t,
        name: *const ::std::os::raw::c_char,
        iter_data: *mut ::std::os::raw::c_void,
    ) -> herr_t,
>;
pub const H5D_mpio_actual_chunk_opt_mode_t_H5D_MPIO_NO_CHUNK_OPTIMIZATION:
    H5D_mpio_actual_chunk_opt_mode_t = 0;
pub const H5D_mpio_actual_chunk_opt_mode_t_H5D_MPIO_LINK_CHUNK: H5D_mpio_actual_chunk_opt_mode_t =
    1;
pub const H5D_mpio_actual_chunk_opt_mode_t_H5D_MPIO_MULTI_CHUNK: H5D_mpio_actual_chunk_opt_mode_t =
    2;
pub type H5D_mpio_actual_chunk_opt_mode_t = ::std::os::raw::c_uint;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_NO_COLLECTIVE: H5D_mpio_actual_io_mode_t = 0;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CHUNK_INDEPENDENT: H5D_mpio_actual_io_mode_t = 1;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CHUNK_COLLECTIVE: H5D_mpio_actual_io_mode_t = 2;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CHUNK_MIXED: H5D_mpio_actual_io_mode_t = 3;
pub const H5D_mpio_actual_io_mode_t_H5D_MPIO_CONTIGUOUS_COLLECTIVE: H5D_mpio_actual_io_mode_t = 4;
pub type H5D_mpio_actual_io_mode_t = ::std::os::raw::c_uint;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_COLLECTIVE: H5D_mpio_no_collective_cause_t = 0;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_SET_INDEPENDENT: H5D_mpio_no_collective_cause_t =
    1;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_DATATYPE_CONVERSION:
    H5D_mpio_no_collective_cause_t = 2;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_DATA_TRANSFORMS: H5D_mpio_no_collective_cause_t =
    4;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED:
    H5D_mpio_no_collective_cause_t = 8;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES:
    H5D_mpio_no_collective_cause_t = 16;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET:
    H5D_mpio_no_collective_cause_t = 32;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED:
    H5D_mpio_no_collective_cause_t = 64;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_ERROR_WHILE_CHECKING_COLLECTIVE_POSSIBLE:
    H5D_mpio_no_collective_cause_t = 128;
pub const H5D_mpio_no_collective_cause_t_H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE:
    H5D_mpio_no_collective_cause_t = 256;
pub type H5D_mpio_no_collective_cause_t = ::std::os::raw::c_uint;
extern "C" {
    pub static mut H5P_CLS_ROOT_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_OBJECT_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_FILE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_FILE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATASET_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATASET_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATASET_XFER_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_FILE_MOUNT_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_GROUP_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_GROUP_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATATYPE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_DATATYPE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_STRING_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_ATTRIBUTE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_ATTRIBUTE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_OBJECT_COPY_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_LINK_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_CLS_LINK_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_FILE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_FILE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATASET_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATASET_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATASET_XFER_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_FILE_MOUNT_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_GROUP_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_GROUP_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATATYPE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_DATATYPE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_ATTRIBUTE_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_ATTRIBUTE_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_OBJECT_COPY_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_LINK_CREATE_ID_g: hid_t;
}
extern "C" {
    pub static mut H5P_LST_LINK_ACCESS_ID_g: hid_t;
}
extern "C" {
    pub fn H5Pcreate_class(
        parent: hid_t,
        name: *const ::std::os::raw::c_char,
        cls_create: H5P_cls_create_func_t,
        create_data: *mut ::std::os::raw::c_void,
        cls_copy: H5P_cls_copy_func_t,
        copy_data: *mut ::std::os::raw::c_void,
        cls_close: H5P_cls_close_func_t,
        close_data: *mut ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Pget_class_name(pclass_id: hid_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn H5Pcreate(cls_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pregister2(
        cls_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        def_value: *mut ::std::os::raw::c_void,
        prp_create: H5P_prp_create_func_t,
        prp_set: H5P_prp_set_func_t,
        prp_get: H5P_prp_get_func_t,
        prp_del: H5P_prp_delete_func_t,
        prp_copy: H5P_prp_copy_func_t,
        prp_cmp: H5P_prp_compare_func_t,
        prp_close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pinsert2(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
        prp_set: H5P_prp_set_func_t,
        prp_get: H5P_prp_get_func_t,
        prp_delete: H5P_prp_delete_func_t,
        prp_copy: H5P_prp_copy_func_t,
        prp_cmp: H5P_prp_compare_func_t,
        prp_close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pexist(plist_id: hid_t, name: *const ::std::os::raw::c_char) -> htri_t;
}
extern "C" {
    pub fn H5Pencode(
        plist_id: hid_t,
        buf: *mut ::std::os::raw::c_void,
        nalloc: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pdecode(buf: *const ::std::os::raw::c_void) -> hid_t;
}
extern "C" {
    pub fn H5Pget_size(id: hid_t, name: *const ::std::os::raw::c_char, size: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_nprops(id: hid_t, nprops: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_class(plist_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pget_class_parent(pclass_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pget(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pequal(id1: hid_t, id2: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Pisa_class(plist_id: hid_t, pclass_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Piterate(
        id: hid_t,
        idx: *mut ::std::os::raw::c_int,
        iter_func: H5P_iterate_t,
        iter_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pcopy_prop(
        dst_id: hid_t,
        src_id: hid_t,
        name: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Premove(plist_id: hid_t, name: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Punregister(pclass_id: hid_t, name: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Pclose_class(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pclose(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pcopy(plist_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pset_attr_phase_change(
        plist_id: hid_t,
        max_compact: ::std::os::raw::c_uint,
        min_dense: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_attr_phase_change(
        plist_id: hid_t,
        max_compact: *mut ::std::os::raw::c_uint,
        min_dense: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_attr_creation_order(
        plist_id: hid_t,
        crt_order_flags: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_attr_creation_order(
        plist_id: hid_t,
        crt_order_flags: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_obj_track_times(plist_id: hid_t, track_times: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_obj_track_times(plist_id: hid_t, track_times: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pmodify_filter(
        plist_id: hid_t,
        filter: H5Z_filter_t,
        flags: ::std::os::raw::c_uint,
        cd_nelmts: usize,
        cd_values: *const ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_filter(
        plist_id: hid_t,
        filter: H5Z_filter_t,
        flags: ::std::os::raw::c_uint,
        cd_nelmts: usize,
        c_values: *const ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_nfilters(plist_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pget_filter2(
        plist_id: hid_t,
        filter: ::std::os::raw::c_uint,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
        filter_config: *mut ::std::os::raw::c_uint,
    ) -> H5Z_filter_t;
}
extern "C" {
    pub fn H5Pget_filter_by_id2(
        plist_id: hid_t,
        id: H5Z_filter_t,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
        filter_config: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pall_filters_avail(plist_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Premove_filter(plist_id: hid_t, filter: H5Z_filter_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_deflate(plist_id: hid_t, aggression: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fletcher32(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_userblock(plist_id: hid_t, size: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_userblock(plist_id: hid_t, size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_sizes(plist_id: hid_t, sizeof_addr: usize, sizeof_size: usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_sizes(
        plist_id: hid_t,
        sizeof_addr: *mut usize,
        sizeof_size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_sym_k(
        plist_id: hid_t,
        ik: ::std::os::raw::c_uint,
        lk: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_sym_k(
        plist_id: hid_t,
        ik: *mut ::std::os::raw::c_uint,
        lk: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_istore_k(plist_id: hid_t, ik: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pget_istore_k(plist_id: hid_t, ik: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shared_mesg_nindexes(plist_id: hid_t, nindexes: ::std::os::raw::c_uint)
        -> herr_t;
}
extern "C" {
    pub fn H5Pget_shared_mesg_nindexes(
        plist_id: hid_t,
        nindexes: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shared_mesg_index(
        plist_id: hid_t,
        index_num: ::std::os::raw::c_uint,
        mesg_type_flags: ::std::os::raw::c_uint,
        min_mesg_size: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_shared_mesg_index(
        plist_id: hid_t,
        index_num: ::std::os::raw::c_uint,
        mesg_type_flags: *mut ::std::os::raw::c_uint,
        min_mesg_size: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shared_mesg_phase_change(
        plist_id: hid_t,
        max_list: ::std::os::raw::c_uint,
        min_btree: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_shared_mesg_phase_change(
        plist_id: hid_t,
        max_list: *mut ::std::os::raw::c_uint,
        min_btree: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_space_strategy(
        plist_id: hid_t,
        strategy: H5F_fspace_strategy_t,
        persist: hbool_t,
        threshold: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_space_strategy(
        plist_id: hid_t,
        strategy: *mut H5F_fspace_strategy_t,
        persist: *mut hbool_t,
        threshold: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_space_page_size(plist_id: hid_t, fsp_size: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_space_page_size(plist_id: hid_t, fsp_size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_alignment(fapl_id: hid_t, threshold: hsize_t, alignment: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_alignment(
        fapl_id: hid_t,
        threshold: *mut hsize_t,
        alignment: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_driver(
        plist_id: hid_t,
        driver_id: hid_t,
        driver_info: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_driver(plist_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pget_driver_info(plist_id: hid_t) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn H5Pset_family_offset(fapl_id: hid_t, offset: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_family_offset(fapl_id: hid_t, offset: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_multi_type(fapl_id: hid_t, type_: H5FD_mem_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_multi_type(fapl_id: hid_t, type_: *mut H5FD_mem_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_cache(
        plist_id: hid_t,
        mdc_nelmts: ::std::os::raw::c_int,
        rdcc_nslots: usize,
        rdcc_nbytes: usize,
        rdcc_w0: f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_cache(
        plist_id: hid_t,
        mdc_nelmts: *mut ::std::os::raw::c_int,
        rdcc_nslots: *mut usize,
        rdcc_nbytes: *mut usize,
        rdcc_w0: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mdc_config(plist_id: hid_t, config_ptr: *mut H5AC_cache_config_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mdc_config(plist_id: hid_t, config_ptr: *mut H5AC_cache_config_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_gc_references(fapl_id: hid_t, gc_ref: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pget_gc_references(fapl_id: hid_t, gc_ref: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fclose_degree(fapl_id: hid_t, degree: H5F_close_degree_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fclose_degree(fapl_id: hid_t, degree: *mut H5F_close_degree_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_meta_block_size(fapl_id: hid_t, size: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_meta_block_size(fapl_id: hid_t, size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_sieve_buf_size(fapl_id: hid_t, size: usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_sieve_buf_size(fapl_id: hid_t, size: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pset_small_data_block_size(fapl_id: hid_t, size: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_small_data_block_size(fapl_id: hid_t, size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_libver_bounds(plist_id: hid_t, low: H5F_libver_t, high: H5F_libver_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_libver_bounds(
        plist_id: hid_t,
        low: *mut H5F_libver_t,
        high: *mut H5F_libver_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_file_cache_size(
        plist_id: hid_t,
        efc_size: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_elink_file_cache_size(
        plist_id: hid_t,
        efc_size: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_image(
        fapl_id: hid_t,
        buf_ptr: *mut ::std::os::raw::c_void,
        buf_len: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_image(
        fapl_id: hid_t,
        buf_ptr_ptr: *mut *mut ::std::os::raw::c_void,
        buf_len_ptr: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_image_callbacks(
        fapl_id: hid_t,
        callbacks_ptr: *mut H5FD_file_image_callbacks_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_image_callbacks(
        fapl_id: hid_t,
        callbacks_ptr: *mut H5FD_file_image_callbacks_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_core_write_tracking(
        fapl_id: hid_t,
        is_enabled: hbool_t,
        page_size: usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_core_write_tracking(
        fapl_id: hid_t,
        is_enabled: *mut hbool_t,
        page_size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_metadata_read_attempts(
        plist_id: hid_t,
        attempts: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_metadata_read_attempts(
        plist_id: hid_t,
        attempts: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_object_flush_cb(
        plist_id: hid_t,
        func: H5F_flush_cb_t,
        udata: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_object_flush_cb(
        plist_id: hid_t,
        func: *mut H5F_flush_cb_t,
        udata: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mdc_log_options(
        plist_id: hid_t,
        is_enabled: hbool_t,
        location: *const ::std::os::raw::c_char,
        start_on_access: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mdc_log_options(
        plist_id: hid_t,
        is_enabled: *mut hbool_t,
        location: *mut ::std::os::raw::c_char,
        location_size: *mut usize,
        start_on_access: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_evict_on_close(fapl_id: hid_t, evict_on_close: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_evict_on_close(fapl_id: hid_t, evict_on_close: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_locking(
        fapl_id: hid_t,
        use_file_locking: hbool_t,
        ignore_when_disabled: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_locking(
        fapl_id: hid_t,
        use_file_locking: *mut hbool_t,
        ignore_when_disabled: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mdc_image_config(
        plist_id: hid_t,
        config_ptr: *mut H5AC_cache_image_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mdc_image_config(
        plist_id: hid_t,
        config_ptr: *mut H5AC_cache_image_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_page_buffer_size(
        plist_id: hid_t,
        buf_size: usize,
        min_meta_per: ::std::os::raw::c_uint,
        min_raw_per: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_page_buffer_size(
        plist_id: hid_t,
        buf_size: *mut usize,
        min_meta_per: *mut ::std::os::raw::c_uint,
        min_raw_per: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_layout(plist_id: hid_t, layout: H5D_layout_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_layout(plist_id: hid_t) -> H5D_layout_t;
}
extern "C" {
    pub fn H5Pset_chunk(
        plist_id: hid_t,
        ndims: ::std::os::raw::c_int,
        dim: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_chunk(
        plist_id: hid_t,
        max_ndims: ::std::os::raw::c_int,
        dim: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pset_virtual(
        dcpl_id: hid_t,
        vspace_id: hid_t,
        src_file_name: *const ::std::os::raw::c_char,
        src_dset_name: *const ::std::os::raw::c_char,
        src_space_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_virtual_count(dcpl_id: hid_t, count: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_virtual_vspace(dcpl_id: hid_t, index: usize) -> hid_t;
}
extern "C" {
    pub fn H5Pget_virtual_srcspace(dcpl_id: hid_t, index: usize) -> hid_t;
}
extern "C" {
    pub fn H5Pget_virtual_filename(
        dcpl_id: hid_t,
        index: usize,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_virtual_dsetname(
        dcpl_id: hid_t,
        index: usize,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pset_external(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        offset: off_t,
        size: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_chunk_opts(plist_id: hid_t, opts: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pget_chunk_opts(plist_id: hid_t, opts: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pget_external_count(plist_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pget_external(
        plist_id: hid_t,
        idx: ::std::os::raw::c_uint,
        name_size: usize,
        name: *mut ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_szip(
        plist_id: hid_t,
        options_mask: ::std::os::raw::c_uint,
        pixels_per_block: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_shuffle(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_nbit(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_scaleoffset(
        plist_id: hid_t,
        scale_type: H5Z_SO_scale_type_t,
        scale_factor: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fill_value(
        plist_id: hid_t,
        type_id: hid_t,
        value: *const ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fill_value(
        plist_id: hid_t,
        type_id: hid_t,
        value: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pfill_value_defined(plist: hid_t, status: *mut H5D_fill_value_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_alloc_time(plist_id: hid_t, alloc_time: H5D_alloc_time_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_alloc_time(plist_id: hid_t, alloc_time: *mut H5D_alloc_time_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fill_time(plist_id: hid_t, fill_time: H5D_fill_time_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fill_time(plist_id: hid_t, fill_time: *mut H5D_fill_time_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_dset_no_attrs_hint(dcpl_id: hid_t, minimize: *mut hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_dset_no_attrs_hint(dcpl_id: hid_t, minimize: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_chunk_cache(
        dapl_id: hid_t,
        rdcc_nslots: usize,
        rdcc_nbytes: usize,
        rdcc_w0: f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_chunk_cache(
        dapl_id: hid_t,
        rdcc_nslots: *mut usize,
        rdcc_nbytes: *mut usize,
        rdcc_w0: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_virtual_view(plist_id: hid_t, view: H5D_vds_view_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_virtual_view(plist_id: hid_t, view: *mut H5D_vds_view_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_virtual_printf_gap(plist_id: hid_t, gap_size: hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_virtual_printf_gap(plist_id: hid_t, gap_size: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_virtual_prefix(dapl_id: hid_t, prefix: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Pget_virtual_prefix(
        dapl_id: hid_t,
        prefix: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pset_append_flush(
        plist_id: hid_t,
        ndims: ::std::os::raw::c_uint,
        boundary: *const hsize_t,
        func: H5D_append_cb_t,
        udata: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_append_flush(
        plist_id: hid_t,
        dims: ::std::os::raw::c_uint,
        boundary: *mut hsize_t,
        func: *mut H5D_append_cb_t,
        udata: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_efile_prefix(dapl_id: hid_t, prefix: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Pget_efile_prefix(
        dapl_id: hid_t,
        prefix: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pset_data_transform(
        plist_id: hid_t,
        expression: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_data_transform(
        plist_id: hid_t,
        expression: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pset_buffer(
        plist_id: hid_t,
        size: usize,
        tconv: *mut ::std::os::raw::c_void,
        bkg: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_buffer(
        plist_id: hid_t,
        tconv: *mut *mut ::std::os::raw::c_void,
        bkg: *mut *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn H5Pset_preserve(plist_id: hid_t, status: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_preserve(plist_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Pset_edc_check(plist_id: hid_t, check: H5Z_EDC_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_edc_check(plist_id: hid_t) -> H5Z_EDC_t;
}
extern "C" {
    pub fn H5Pset_filter_callback(
        plist_id: hid_t,
        func: H5Z_filter_func_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_btree_ratios(plist_id: hid_t, left: f64, middle: f64, right: f64) -> herr_t;
}
extern "C" {
    pub fn H5Pget_btree_ratios(
        plist_id: hid_t,
        left: *mut f64,
        middle: *mut f64,
        right: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_vlen_mem_manager(
        plist_id: hid_t,
        alloc_func: H5MM_allocate_t,
        alloc_info: *mut ::std::os::raw::c_void,
        free_func: H5MM_free_t,
        free_info: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_vlen_mem_manager(
        plist_id: hid_t,
        alloc_func: *mut H5MM_allocate_t,
        alloc_info: *mut *mut ::std::os::raw::c_void,
        free_func: *mut H5MM_free_t,
        free_info: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_hyper_vector_size(fapl_id: hid_t, size: usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_hyper_vector_size(fapl_id: hid_t, size: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pset_type_conv_cb(
        dxpl_id: hid_t,
        op: H5T_conv_except_func_t,
        operate_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_type_conv_cb(
        dxpl_id: hid_t,
        op: *mut H5T_conv_except_func_t,
        operate_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_create_intermediate_group(
        plist_id: hid_t,
        crt_intmd: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_create_intermediate_group(
        plist_id: hid_t,
        crt_intmd: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_local_heap_size_hint(plist_id: hid_t, size_hint: usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_local_heap_size_hint(plist_id: hid_t, size_hint: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pset_link_phase_change(
        plist_id: hid_t,
        max_compact: ::std::os::raw::c_uint,
        min_dense: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_link_phase_change(
        plist_id: hid_t,
        max_compact: *mut ::std::os::raw::c_uint,
        min_dense: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_est_link_info(
        plist_id: hid_t,
        est_num_entries: ::std::os::raw::c_uint,
        est_name_len: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_est_link_info(
        plist_id: hid_t,
        est_num_entries: *mut ::std::os::raw::c_uint,
        est_name_len: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_link_creation_order(
        plist_id: hid_t,
        crt_order_flags: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_link_creation_order(
        plist_id: hid_t,
        crt_order_flags: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_char_encoding(plist_id: hid_t, encoding: H5T_cset_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_char_encoding(plist_id: hid_t, encoding: *mut H5T_cset_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_nlinks(plist_id: hid_t, nlinks: usize) -> herr_t;
}
extern "C" {
    pub fn H5Pget_nlinks(plist_id: hid_t, nlinks: *mut usize) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_prefix(plist_id: hid_t, prefix: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5Pget_elink_prefix(
        plist_id: hid_t,
        prefix: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Pget_elink_fapl(lapl_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Pset_elink_fapl(lapl_id: hid_t, fapl_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_acc_flags(lapl_id: hid_t, flags: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pget_elink_acc_flags(lapl_id: hid_t, flags: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pset_elink_cb(
        lapl_id: hid_t,
        func: H5L_elink_traverse_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_elink_cb(
        lapl_id: hid_t,
        func: *mut H5L_elink_traverse_t,
        op_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_copy_object(plist_id: hid_t, crt_intmd: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Pget_copy_object(plist_id: hid_t, crt_intmd: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5Padd_merge_committed_dtype_path(
        plist_id: hid_t,
        path: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pfree_merge_committed_dtype_paths(plist_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_mcdt_search_cb(
        plist_id: hid_t,
        func: H5O_mcdt_search_cb_t,
        op_data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_mcdt_search_cb(
        plist_id: hid_t,
        func: *mut H5O_mcdt_search_cb_t,
        op_data: *mut *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pregister1(
        cls_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        def_value: *mut ::std::os::raw::c_void,
        prp_create: H5P_prp_create_func_t,
        prp_set: H5P_prp_set_func_t,
        prp_get: H5P_prp_get_func_t,
        prp_del: H5P_prp_delete_func_t,
        prp_copy: H5P_prp_copy_func_t,
        prp_close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pinsert1(
        plist_id: hid_t,
        name: *const ::std::os::raw::c_char,
        size: usize,
        value: *mut ::std::os::raw::c_void,
        prp_set: H5P_prp_set_func_t,
        prp_get: H5P_prp_get_func_t,
        prp_delete: H5P_prp_delete_func_t,
        prp_copy: H5P_prp_copy_func_t,
        prp_close: H5P_prp_close_func_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_filter1(
        plist_id: hid_t,
        filter: ::std::os::raw::c_uint,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
    ) -> H5Z_filter_t;
}
extern "C" {
    pub fn H5Pget_filter_by_id1(
        plist_id: hid_t,
        id: H5Z_filter_t,
        flags: *mut ::std::os::raw::c_uint,
        cd_nelmts: *mut usize,
        cd_values: *mut ::std::os::raw::c_uint,
        namelen: usize,
        name: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_version(
        plist_id: hid_t,
        boot: *mut ::std::os::raw::c_uint,
        freelist: *mut ::std::os::raw::c_uint,
        stab: *mut ::std::os::raw::c_uint,
        shhdr: *mut ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_file_space(
        plist_id: hid_t,
        strategy: H5F_file_space_type_t,
        threshold: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_file_space(
        plist_id: hid_t,
        strategy: *mut H5F_file_space_type_t,
        threshold: *mut hsize_t,
    ) -> herr_t;
}
pub const H5PL_type_t_H5PL_TYPE_ERROR: H5PL_type_t = -1;
pub const H5PL_type_t_H5PL_TYPE_FILTER: H5PL_type_t = 0;
pub const H5PL_type_t_H5PL_TYPE_NONE: H5PL_type_t = 1;
pub type H5PL_type_t = ::std::os::raw::c_int;
extern "C" {
    pub fn H5PLset_loading_state(plugin_control_mask: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5PLget_loading_state(plugin_control_mask: *mut ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5PLappend(search_path: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5PLprepend(search_path: *const ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn H5PLreplace(
        search_path: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5PLinsert(
        search_path: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn H5PLremove(index: ::std::os::raw::c_uint) -> herr_t;
}
extern "C" {
    pub fn H5PLget(
        index: ::std::os::raw::c_uint,
        path_buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5PLsize(num_paths: *mut ::std::os::raw::c_uint) -> herr_t;
}
pub const H5R_type_t_H5R_BADTYPE: H5R_type_t = -1;
pub const H5R_type_t_H5R_OBJECT: H5R_type_t = 0;
pub const H5R_type_t_H5R_DATASET_REGION: H5R_type_t = 1;
pub const H5R_type_t_H5R_MAXTYPE: H5R_type_t = 2;
pub type H5R_type_t = ::std::os::raw::c_int;
pub type hobj_ref_t = haddr_t;
pub type hdset_reg_ref_t = [::std::os::raw::c_uchar; 12usize];
extern "C" {
    pub fn H5Rcreate(
        ref_: *mut ::std::os::raw::c_void,
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        ref_type: H5R_type_t,
        space_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rdereference2(
        obj_id: hid_t,
        oapl_id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Rget_region(
        dataset: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Rget_obj_type2(
        id: hid_t,
        ref_type: H5R_type_t,
        _ref: *const ::std::os::raw::c_void,
        obj_type: *mut H5O_type_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Rget_name(
        loc_id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn H5Rget_obj_type1(
        id: hid_t,
        ref_type: H5R_type_t,
        _ref: *const ::std::os::raw::c_void,
    ) -> H5G_obj_t;
}
extern "C" {
    pub fn H5Rdereference1(
        obj_id: hid_t,
        ref_type: H5R_type_t,
        ref_: *const ::std::os::raw::c_void,
    ) -> hid_t;
}
pub const H5S_class_t_H5S_NO_CLASS: H5S_class_t = -1;
pub const H5S_class_t_H5S_SCALAR: H5S_class_t = 0;
pub const H5S_class_t_H5S_SIMPLE: H5S_class_t = 1;
pub const H5S_class_t_H5S_NULL: H5S_class_t = 2;
pub type H5S_class_t = ::std::os::raw::c_int;
pub const H5S_seloper_t_H5S_SELECT_NOOP: H5S_seloper_t = -1;
pub const H5S_seloper_t_H5S_SELECT_SET: H5S_seloper_t = 0;
pub const H5S_seloper_t_H5S_SELECT_OR: H5S_seloper_t = 1;
pub const H5S_seloper_t_H5S_SELECT_AND: H5S_seloper_t = 2;
pub const H5S_seloper_t_H5S_SELECT_XOR: H5S_seloper_t = 3;
pub const H5S_seloper_t_H5S_SELECT_NOTB: H5S_seloper_t = 4;
pub const H5S_seloper_t_H5S_SELECT_NOTA: H5S_seloper_t = 5;
pub const H5S_seloper_t_H5S_SELECT_APPEND: H5S_seloper_t = 6;
pub const H5S_seloper_t_H5S_SELECT_PREPEND: H5S_seloper_t = 7;
pub const H5S_seloper_t_H5S_SELECT_INVALID: H5S_seloper_t = 8;
pub type H5S_seloper_t = ::std::os::raw::c_int;
pub const H5S_sel_type_H5S_SEL_ERROR: H5S_sel_type = -1;
pub const H5S_sel_type_H5S_SEL_NONE: H5S_sel_type = 0;
pub const H5S_sel_type_H5S_SEL_POINTS: H5S_sel_type = 1;
pub const H5S_sel_type_H5S_SEL_HYPERSLABS: H5S_sel_type = 2;
pub const H5S_sel_type_H5S_SEL_ALL: H5S_sel_type = 3;
pub const H5S_sel_type_H5S_SEL_N: H5S_sel_type = 4;
pub type H5S_sel_type = ::std::os::raw::c_int;
extern "C" {
    pub fn H5Screate(type_: H5S_class_t) -> hid_t;
}
extern "C" {
    pub fn H5Screate_simple(
        rank: ::std::os::raw::c_int,
        dims: *const hsize_t,
        maxdims: *const hsize_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Sset_extent_simple(
        space_id: hid_t,
        rank: ::std::os::raw::c_int,
        dims: *const hsize_t,
        max: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Scopy(space_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Sclose(space_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sencode(obj_id: hid_t, buf: *mut ::std::os::raw::c_void, nalloc: *mut usize)
        -> herr_t;
}
extern "C" {
    pub fn H5Sdecode(buf: *const ::std::os::raw::c_void) -> hid_t;
}
extern "C" {
    pub fn H5Sget_simple_extent_npoints(space_id: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sget_simple_extent_ndims(space_id: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Sget_simple_extent_dims(
        space_id: hid_t,
        dims: *mut hsize_t,
        maxdims: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn H5Sis_simple(space_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sget_simple_extent_type(space_id: hid_t) -> H5S_class_t;
}
extern "C" {
    pub fn H5Sset_extent_none(space_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sextent_copy(dst_id: hid_t, src_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sextent_equal(sid1: hid_t, sid2: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sget_select_type(spaceid: hid_t) -> H5S_sel_type;
}
extern "C" {
    pub fn H5Sget_select_npoints(spaceid: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sselect_copy(dst_id: hid_t, src_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_valid(spaceid: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sselect_adjust(spaceid: hid_t, offset: *const hssize_t) -> herr_t;
}
extern "C" {
    pub fn H5Sget_select_bounds(spaceid: hid_t, start: *mut hsize_t, end: *mut hsize_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_shape_same(space1_id: hid_t, space2_id: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sselect_intersect_block(
        space_id: hid_t,
        start: *const hsize_t,
        end: *const hsize_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Soffset_simple(space_id: hid_t, offset: *const hssize_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_all(spaceid: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_none(spaceid: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_elements(
        space_id: hid_t,
        op: H5S_seloper_t,
        num_elem: usize,
        coord: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sget_select_elem_npoints(spaceid: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sget_select_elem_pointlist(
        spaceid: hid_t,
        startpoint: hsize_t,
        numpoints: hsize_t,
        buf: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_hyperslab(
        space_id: hid_t,
        op: H5S_seloper_t,
        start: *const hsize_t,
        _stride: *const hsize_t,
        count: *const hsize_t,
        _block: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Scombine_hyperslab(
        space_id: hid_t,
        op: H5S_seloper_t,
        start: *const hsize_t,
        _stride: *const hsize_t,
        count: *const hsize_t,
        _block: *const hsize_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5Smodify_select(space1_id: hid_t, op: H5S_seloper_t, space2_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Scombine_select(space1_id: hid_t, op: H5S_seloper_t, space2_id: hid_t) -> hid_t;
}
extern "C" {
    pub fn H5Sis_regular_hyperslab(spaceid: hid_t) -> htri_t;
}
extern "C" {
    pub fn H5Sget_regular_hyperslab(
        spaceid: hid_t,
        start: *mut hsize_t,
        stride: *mut hsize_t,
        count: *mut hsize_t,
        block: *mut hsize_t,
    ) -> htri_t;
}
extern "C" {
    pub fn H5Sget_select_hyper_nblocks(spaceid: hid_t) -> hssize_t;
}
extern "C" {
    pub fn H5Sget_select_hyper_blocklist(
        spaceid: hid_t,
        startblock: hsize_t,
        numblocks: hsize_t,
        buf: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Sselect_project_intersection(
        src_space_id: hid_t,
        dst_space_id: hid_t,
        src_intersect_space_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn H5FD_core_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_core(fapl_id: hid_t, increment: usize, backing_store: hbool_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_core(
        fapl_id: hid_t,
        increment: *mut usize,
        backing_store: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_family_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_family(fapl_id: hid_t, memb_size: hsize_t, memb_fapl_id: hid_t) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_family(
        fapl_id: hid_t,
        memb_size: *mut hsize_t,
        memb_fapl_id: *mut hid_t,
    ) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_hdfs_fapl_t {
    pub version: i32,
    pub namenode_name: [::std::os::raw::c_char; 129usize],
    pub namenode_port: i32,
    pub user_name: [::std::os::raw::c_char; 129usize],
    pub kerberos_ticket_cache: [::std::os::raw::c_char; 129usize],
    pub stream_buffer_size: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5FD_hdfs_fapl_t"][::std::mem::size_of::<H5FD_hdfs_fapl_t>() - 404usize];
    ["Alignment of H5FD_hdfs_fapl_t"][::std::mem::align_of::<H5FD_hdfs_fapl_t>() - 4usize];
    ["Offset of field: H5FD_hdfs_fapl_t::version"]
        [::std::mem::offset_of!(H5FD_hdfs_fapl_t, version) - 0usize];
    ["Offset of field: H5FD_hdfs_fapl_t::namenode_name"]
        [::std::mem::offset_of!(H5FD_hdfs_fapl_t, namenode_name) - 4usize];
    ["Offset of field: H5FD_hdfs_fapl_t::namenode_port"]
        [::std::mem::offset_of!(H5FD_hdfs_fapl_t, namenode_port) - 136usize];
    ["Offset of field: H5FD_hdfs_fapl_t::user_name"]
        [::std::mem::offset_of!(H5FD_hdfs_fapl_t, user_name) - 140usize];
    ["Offset of field: H5FD_hdfs_fapl_t::kerberos_ticket_cache"]
        [::std::mem::offset_of!(H5FD_hdfs_fapl_t, kerberos_ticket_cache) - 269usize];
    ["Offset of field: H5FD_hdfs_fapl_t::stream_buffer_size"]
        [::std::mem::offset_of!(H5FD_hdfs_fapl_t, stream_buffer_size) - 400usize];
};
extern "C" {
    pub fn H5FD_hdfs_init() -> hid_t;
}
extern "C" {
    pub fn H5Pget_fapl_hdfs(fapl_id: hid_t, fa_out: *mut H5FD_hdfs_fapl_t) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fapl_hdfs(fapl_id: hid_t, fa: *mut H5FD_hdfs_fapl_t) -> herr_t;
}
extern "C" {
    pub fn H5FD_log_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_log(
        fapl_id: hid_t,
        logfile: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_ulonglong,
        buf_size: usize,
    ) -> herr_t;
}
pub const H5FD_mpio_xfer_t_H5FD_MPIO_INDEPENDENT: H5FD_mpio_xfer_t = 0;
pub const H5FD_mpio_xfer_t_H5FD_MPIO_COLLECTIVE: H5FD_mpio_xfer_t = 1;
pub type H5FD_mpio_xfer_t = ::std::os::raw::c_uint;
pub const H5FD_mpio_chunk_opt_t_H5FD_MPIO_CHUNK_DEFAULT: H5FD_mpio_chunk_opt_t = 0;
pub const H5FD_mpio_chunk_opt_t_H5FD_MPIO_CHUNK_ONE_IO: H5FD_mpio_chunk_opt_t = 1;
pub const H5FD_mpio_chunk_opt_t_H5FD_MPIO_CHUNK_MULTI_IO: H5FD_mpio_chunk_opt_t = 2;
pub type H5FD_mpio_chunk_opt_t = ::std::os::raw::c_uint;
pub const H5FD_mpio_collective_opt_t_H5FD_MPIO_COLLECTIVE_IO: H5FD_mpio_collective_opt_t = 0;
pub const H5FD_mpio_collective_opt_t_H5FD_MPIO_INDIVIDUAL_IO: H5FD_mpio_collective_opt_t = 1;
pub type H5FD_mpio_collective_opt_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn H5FD_multi_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_multi(
        fapl_id: hid_t,
        memb_map: *const H5FD_mem_t,
        memb_fapl: *const hid_t,
        memb_name: *const *const ::std::os::raw::c_char,
        memb_addr: *const haddr_t,
        relax: hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_multi(
        fapl_id: hid_t,
        memb_map: *mut H5FD_mem_t,
        memb_fapl: *mut hid_t,
        memb_name: *mut *mut ::std::os::raw::c_char,
        memb_addr: *mut haddr_t,
        relax: *mut hbool_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pset_fapl_split(
        fapl: hid_t,
        meta_ext: *const ::std::os::raw::c_char,
        meta_plist_id: hid_t,
        raw_ext: *const ::std::os::raw::c_char,
        raw_plist_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_sec2_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_sec2(fapl_id: hid_t) -> herr_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H5FD_splitter_vfd_config_t {
    pub magic: i32,
    pub version: ::std::os::raw::c_uint,
    pub rw_fapl_id: hid_t,
    pub wo_fapl_id: hid_t,
    pub wo_path: [::std::os::raw::c_char; 4097usize],
    pub log_file_path: [::std::os::raw::c_char; 4097usize],
    pub ignore_wo_errs: hbool_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H5FD_splitter_vfd_config_t"]
        [::std::mem::size_of::<H5FD_splitter_vfd_config_t>() - 8224usize];
    ["Alignment of H5FD_splitter_vfd_config_t"]
        [::std::mem::align_of::<H5FD_splitter_vfd_config_t>() - 8usize];
    ["Offset of field: H5FD_splitter_vfd_config_t::magic"]
        [::std::mem::offset_of!(H5FD_splitter_vfd_config_t, magic) - 0usize];
    ["Offset of field: H5FD_splitter_vfd_config_t::version"]
        [::std::mem::offset_of!(H5FD_splitter_vfd_config_t, version) - 4usize];
    ["Offset of field: H5FD_splitter_vfd_config_t::rw_fapl_id"]
        [::std::mem::offset_of!(H5FD_splitter_vfd_config_t, rw_fapl_id) - 8usize];
    ["Offset of field: H5FD_splitter_vfd_config_t::wo_fapl_id"]
        [::std::mem::offset_of!(H5FD_splitter_vfd_config_t, wo_fapl_id) - 16usize];
    ["Offset of field: H5FD_splitter_vfd_config_t::wo_path"]
        [::std::mem::offset_of!(H5FD_splitter_vfd_config_t, wo_path) - 24usize];
    ["Offset of field: H5FD_splitter_vfd_config_t::log_file_path"]
        [::std::mem::offset_of!(H5FD_splitter_vfd_config_t, log_file_path) - 4121usize];
    ["Offset of field: H5FD_splitter_vfd_config_t::ignore_wo_errs"]
        [::std::mem::offset_of!(H5FD_splitter_vfd_config_t, ignore_wo_errs) - 8218usize];
};
extern "C" {
    pub fn H5FD_splitter_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_splitter(
        fapl_id: hid_t,
        config_ptr: *mut H5FD_splitter_vfd_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5Pget_fapl_splitter(
        fapl_id: hid_t,
        config_ptr: *mut H5FD_splitter_vfd_config_t,
    ) -> herr_t;
}
extern "C" {
    pub fn H5FD_stdio_init() -> hid_t;
}
extern "C" {
    pub fn H5Pset_fapl_stdio(fapl_id: hid_t) -> herr_t;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_1 = 0;
pub const FP_INFINITE: _bindgen_ty_1 = 1;
pub const FP_ZERO: _bindgen_ty_1 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_1 = 3;
pub const FP_NORMAL: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
pub type uintn = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HE5_DTSinfo {
    pub ID: hid_t,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HE5_DTSinfo"][::std::mem::size_of::<HE5_DTSinfo>() - 16usize];
    ["Alignment of HE5_DTSinfo"][::std::mem::align_of::<HE5_DTSinfo>() - 8usize];
    ["Offset of field: HE5_DTSinfo::ID"][::std::mem::offset_of!(HE5_DTSinfo, ID) - 0usize];
    ["Offset of field: HE5_DTSinfo::name"][::std::mem::offset_of!(HE5_DTSinfo, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HE5_dimscaleAttr {
    pub attrname: [*mut ::std::os::raw::c_char; 100usize],
    pub numtype: [hid_t; 100usize],
    pub count: [[hsize_t; 8usize]; 100usize],
    pub datbuf: [*mut u8; 100usize],
    pub dsnumberOfAttrs: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HE5_dimscaleAttr"][::std::mem::size_of::<HE5_dimscaleAttr>() - 8808usize];
    ["Alignment of HE5_dimscaleAttr"][::std::mem::align_of::<HE5_dimscaleAttr>() - 8usize];
    ["Offset of field: HE5_dimscaleAttr::attrname"]
        [::std::mem::offset_of!(HE5_dimscaleAttr, attrname) - 0usize];
    ["Offset of field: HE5_dimscaleAttr::numtype"]
        [::std::mem::offset_of!(HE5_dimscaleAttr, numtype) - 800usize];
    ["Offset of field: HE5_dimscaleAttr::count"]
        [::std::mem::offset_of!(HE5_dimscaleAttr, count) - 1600usize];
    ["Offset of field: HE5_dimscaleAttr::datbuf"]
        [::std::mem::offset_of!(HE5_dimscaleAttr, datbuf) - 8000usize];
    ["Offset of field: HE5_dimscaleAttr::dsnumberOfAttrs"]
        [::std::mem::offset_of!(HE5_dimscaleAttr, dsnumberOfAttrs) - 8800usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HE5_CmpDTSinfo {
    pub nfields: ::std::os::raw::c_int,
    pub rank: [::std::os::raw::c_int; 500usize],
    pub array: [::std::os::raw::c_int; 500usize],
    pub fieldname: [*mut ::std::os::raw::c_char; 500usize],
    pub dims: [[usize; 8usize]; 500usize],
    pub datasize: usize,
    pub offset: [usize; 500usize],
    pub dtype: [hid_t; 500usize],
    pub numtype: [hid_t; 500usize],
    pub dclass: [H5T_class_t; 500usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HE5_CmpDTSinfo"][::std::mem::size_of::<HE5_CmpDTSinfo>() - 54016usize];
    ["Alignment of HE5_CmpDTSinfo"][::std::mem::align_of::<HE5_CmpDTSinfo>() - 8usize];
    ["Offset of field: HE5_CmpDTSinfo::nfields"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, nfields) - 0usize];
    ["Offset of field: HE5_CmpDTSinfo::rank"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, rank) - 4usize];
    ["Offset of field: HE5_CmpDTSinfo::array"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, array) - 2004usize];
    ["Offset of field: HE5_CmpDTSinfo::fieldname"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, fieldname) - 4008usize];
    ["Offset of field: HE5_CmpDTSinfo::dims"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, dims) - 8008usize];
    ["Offset of field: HE5_CmpDTSinfo::datasize"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, datasize) - 40008usize];
    ["Offset of field: HE5_CmpDTSinfo::offset"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, offset) - 40016usize];
    ["Offset of field: HE5_CmpDTSinfo::dtype"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, dtype) - 44016usize];
    ["Offset of field: HE5_CmpDTSinfo::numtype"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, numtype) - 48016usize];
    ["Offset of field: HE5_CmpDTSinfo::dclass"]
        [::std::mem::offset_of!(HE5_CmpDTSinfo, dclass) - 52016usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HE5_OBJINFO {
    pub count: ::std::os::raw::c_long,
    pub strsize: ::std::os::raw::c_long,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HE5_OBJINFO"][::std::mem::size_of::<HE5_OBJINFO>() - 24usize];
    ["Alignment of HE5_OBJINFO"][::std::mem::align_of::<HE5_OBJINFO>() - 8usize];
    ["Offset of field: HE5_OBJINFO::count"][::std::mem::offset_of!(HE5_OBJINFO, count) - 0usize];
    ["Offset of field: HE5_OBJINFO::strsize"]
        [::std::mem::offset_of!(HE5_OBJINFO, strsize) - 8usize];
    ["Offset of field: HE5_OBJINFO::name"][::std::mem::offset_of!(HE5_OBJINFO, name) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HE5_HDFE_MutexStruct {
    pub dummyVar: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HE5_HDFE_MutexStruct"][::std::mem::size_of::<HE5_HDFE_MutexStruct>() - 4usize];
    ["Alignment of HE5_HDFE_MutexStruct"][::std::mem::align_of::<HE5_HDFE_MutexStruct>() - 4usize];
    ["Offset of field: HE5_HDFE_MutexStruct::dummyVar"]
        [::std::mem::offset_of!(HE5_HDFE_MutexStruct, dummyVar) - 0usize];
};
extern "C" {
    pub fn HE5_TSinitfirst();
}
extern "C" {
    pub fn HE5_TSmutexlock(arg1: *mut HE5_HDFE_MutexStruct) -> herr_t;
}
extern "C" {
    pub fn HE5_TSmutexunlock(arg1: *mut HE5_HDFE_MutexStruct) -> herr_t;
}
extern "C" {
    pub fn H5E_push(
        maj_num: H5E_major_t,
        min_num: H5E_minor_t,
        func_name: *const ::std::os::raw::c_char,
        file_name: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
        desc: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHopen(
        filename: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        access_id: hid_t,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_EHclose(fid: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_EHgetversion(fid: hid_t, version: *mut ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn HE5_EHchkfid(
        fid: hid_t,
        name: *const ::std::os::raw::c_char,
        HDFfid: *mut hid_t,
        grpID: *mut hid_t,
        access: *mut uintn,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHidinfo(fid: hid_t, HDFfid: *mut hid_t, gid: *mut hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_EHattrcat(
        fid: hid_t,
        grpname: *mut ::std::os::raw::c_char,
        objectlist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHinquire(
        filename: *const ::std::os::raw::c_char,
        grpname: *mut ::std::os::raw::c_char,
        objectlist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHset_error_on(
        flag: ::std::os::raw::c_int,
        err_level: ::std::os::raw::c_int,
    ) -> hsize_t;
}
extern "C" {
    pub fn HE5_EHwritemeta(
        fid: hid_t,
        MetadataName: *const ::std::os::raw::c_char,
        metabuff: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHreadmeta(
        fid: hid_t,
        MetadataName: *const ::std::os::raw::c_char,
        metabufout: *mut ::std::os::raw::c_char,
        bufferSize: *mut ::std::os::raw::c_long,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHinqmetadatas(
        fid: hid_t,
        metadatanames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHprint(
        errbuf: *mut ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_uint,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHmetagroup(
        fid: hid_t,
        structname: *mut ::std::os::raw::c_char,
        structcode: *mut ::std::os::raw::c_char,
        groupname: *mut ::std::os::raw::c_char,
        metaptrs: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn HE5_EHgetmetavalue(
        metaptrs: *mut *mut ::std::os::raw::c_char,
        parameter: *mut ::std::os::raw::c_char,
        retstr: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHinsertmeta(
        fid: hid_t,
        structname: *const ::std::os::raw::c_char,
        structcode: *mut ::std::os::raw::c_char,
        metacode: ::std::os::raw::c_long,
        metastr: *mut ::std::os::raw::c_char,
        metadata: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHmetalist(
        instring: *mut ::std::os::raw::c_char,
        outstring: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHupdatemeta(
        fid: hid_t,
        structname: *const ::std::os::raw::c_char,
        structcode: *mut ::std::os::raw::c_char,
        metacode: ::std::os::raw::c_long,
        metastr: *mut ::std::os::raw::c_char,
        metadata: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHcntOBJECT(metabuf: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHcntGROUP(metabuf: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHattr(
        attgrpID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        wrcode: *mut ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHattrinfo(
        attgrpID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHattrinfo2(
        attgrpID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHdatasetcat(
        fid: hid_t,
        grpname: *mut ::std::os::raw::c_char,
        objectlist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHobj_info(
        loc_id: hid_t,
        name: *const ::std::os::raw::c_char,
        opdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_EHparsestr(
        instring: *const ::std::os::raw::c_char,
        delim: ::std::os::raw::c_char,
        pntr: *mut *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHstrwithin(
        target: *mut ::std::os::raw::c_char,
        search: *mut ::std::os::raw::c_char,
        delim: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHstrwithin_index(
        target: *mut ::std::os::raw::c_char,
        search: *mut ::std::os::raw::c_char,
        delim: ::std::os::raw::c_char,
        index_found: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHloadliststr(
        ptr: *mut *mut ::std::os::raw::c_char,
        nentries: ::std::os::raw::c_long,
        liststr: *mut ::std::os::raw::c_char,
        delim: ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHconvAng(inAngle: f64, code: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn HE5_EHrevflds(
        dimlist: *mut ::std::os::raw::c_char,
        revdimlist: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHbisect(
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut f64) -> f64>,
        funcParms: *mut f64,
        nParms: ::std::os::raw::c_long,
        limLft: f64,
        limRgt: f64,
        convCrit: f64,
        root: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHdtype2mtype(dtypeID: hid_t) -> hid_t;
}
extern "C" {
    pub fn HE5_EHdtype2numtype(dtype: hid_t) -> hid_t;
}
extern "C" {
    pub fn HE5_EHconvdatatype(fortdatatype: hid_t) -> hid_t;
}
extern "C" {
    pub fn HE5_EHwriteglbattr(
        fid: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHreadglbattr(
        fid: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHglbattrinfo(
        fid: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHglbattrinfo2(
        fid: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHinqglbattrs(
        fid: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHinqglbdatatype(
        fid: hid_t,
        attrname: *const ::std::os::raw::c_char,
        dtype: *mut hid_t,
        classid: *mut H5T_class_t,
        order: *mut H5T_order_t,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_szip_can_encode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_EHhid2long(invalue: hid_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHint2long(invalue: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHhid2int(invalue: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_EHint2hid(invalue: ::std::os::raw::c_int) -> hid_t;
}
extern "C" {
    pub fn HE5_EHlong2hid(invalue: ::std::os::raw::c_long) -> hid_t;
}
extern "C" {
    pub fn HE5_EHlong2int(invalue: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_EHhid2hsize(invalue: hid_t) -> hsize_t;
}
extern "C" {
    pub fn HE5_EHint2hsize(invalue: ::std::os::raw::c_int) -> hsize_t;
}
extern "C" {
    pub fn HE5_EHlong2hsize(invalue: ::std::os::raw::c_long) -> hsize_t;
}
extern "C" {
    pub fn HE5_EHhsize2hid(invalue: hsize_t) -> hid_t;
}
extern "C" {
    pub fn HE5_EHhsize2long(invalue: hsize_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHhsize2int(invalue: hsize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_EHhsize2hssize(invalue: hsize_t) -> hssize_t;
}
extern "C" {
    pub fn HE5_EHhid2hssize(invalue: hid_t) -> hssize_t;
}
extern "C" {
    pub fn HE5_EHint2hssize(invalue: ::std::os::raw::c_int) -> hssize_t;
}
extern "C" {
    pub fn HE5_EHlong2hssize(invalue: ::std::os::raw::c_long) -> hssize_t;
}
extern "C" {
    pub fn HE5_EHhssize2hid(invalue: hssize_t) -> hid_t;
}
extern "C" {
    pub fn HE5_EHhssize2long(invalue: hssize_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHhssize2int(invalue: hssize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_EHhssize2hsize(invalue: hssize_t) -> hsize_t;
}
extern "C" {
    pub fn HE5_EHint2ullong(invalue: ::std::os::raw::c_int) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn HE5_EHullong2long(invalue: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_EHchkptr(
        p: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHchkname(
        p: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_EHHEisHE5(filename: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_SWopen(filename: *const ::std::os::raw::c_char, flags: uintn) -> hid_t;
}
extern "C" {
    pub fn HE5_SWcreate(fid: hid_t, swathname: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn HE5_SWattach(fid: hid_t, swathname: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn HE5_SWdetach(swathID: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_SWclose(fid: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefdim(
        swathID: hid_t,
        dimname: *mut ::std::os::raw::c_char,
        dim: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefdimmap(
        swathID: hid_t,
        geodim: *mut ::std::os::raw::c_char,
        datadim: *mut ::std::os::raw::c_char,
        offset: hsize_t,
        increment: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefidxmap(
        swathID: hid_t,
        geodim: *mut ::std::os::raw::c_char,
        datadim: *mut ::std::os::raw::c_char,
        index: *mut ::std::os::raw::c_long,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefgeofield(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
        ntype: hid_t,
        merge: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefdatafield(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
        ntype: hid_t,
        merge: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefchunk(
        swathID: hid_t,
        ndims: ::std::os::raw::c_int,
        dim: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefcomp(
        swathID: hid_t,
        compcode: ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefcomchunk(
        swathID: hid_t,
        compcode: ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dim: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWsetfillvalue(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        ntype: hid_t,
        fillval: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWsetalias(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        aliaslist: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdropalias(
        swathID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliasname: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWfldrename(
        swathID: hid_t,
        oldfieldname: *mut ::std::os::raw::c_char,
        newfieldname: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWsetdimscale(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: hsize_t,
        numbertype: hid_t,
        databuff: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdefdimscale(
        swathID: hid_t,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: hsize_t,
        numbertype: hid_t,
        datbuff: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwritedatameta(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        mvalue: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwriteattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwritegrpattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwritegeogrpattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwritelocattr(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWreadattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWreadgrpattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWreadgeogrpattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWreadlocattr(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwritefield(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        edge: *const hsize_t,
        data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWreadfield(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        edge: *const hsize_t,
        data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwritegeometa(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        mvalue: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWwritedscaleattr(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        numtype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWchunkinfo(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        ndims: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdiminfo(swathID: hid_t, dimname: *mut ::std::os::raw::c_char) -> hsize_t;
}
extern "C" {
    pub fn HE5_SWmapinfo(
        swathID: hid_t,
        geodim: *mut ::std::os::raw::c_char,
        datadim: *mut ::std::os::raw::c_char,
        offset: *mut ::std::os::raw::c_long,
        increment: *mut ::std::os::raw::c_long,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWidxmapinfo(
        swathID: hid_t,
        geodim: *mut ::std::os::raw::c_char,
        datadim: *mut ::std::os::raw::c_char,
        index: *mut ::std::os::raw::c_long,
    ) -> hsize_t;
}
extern "C" {
    pub fn HE5_SWfldsrch(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        fieldID: *mut hid_t,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        typeID: *mut hid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_SWfieldinfo(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        ntype: *mut hid_t,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWcompinfo(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        compcode: *mut ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWattrinfo(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWgrpattrinfo(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWgeogrpattrinfo(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWlocattrinfo(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWattrinfo2(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWgrpattrinfo2(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWgeogrpattrinfo2(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWlocattrinfo2(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWinqdatatype(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        group: ::std::os::raw::c_int,
        dtype: *mut hid_t,
        classid: *mut H5T_class_t,
        order: *mut H5T_order_t,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWinqdims(
        swathID: hid_t,
        dimnames: *mut ::std::os::raw::c_char,
        dims: *mut hsize_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqmaps(
        swathID: hid_t,
        dimmaps: *mut ::std::os::raw::c_char,
        offset: *mut ::std::os::raw::c_long,
        increment: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqidxmaps(
        swathID: hid_t,
        idxmaps: *mut ::std::os::raw::c_char,
        idxsizes: *mut hsize_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqgeofields(
        swathID: hid_t,
        fieldlist: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        ntype: *mut hid_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqdatafields(
        swathID: hid_t,
        fieldlist: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        ntype: *mut hid_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqattrs(
        swathID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqgrpattrs(
        swathID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqgeogrpattrs(
        swathID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqlocattrs(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWnentries(
        swathID: hid_t,
        entrycode: ::std::os::raw::c_int,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqswath(
        filename: *const ::std::os::raw::c_char,
        swathlist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWregioninfo(
        swathID: hid_t,
        regionID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        ntype: *mut hid_t,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWperiodinfo(
        swathID: hid_t,
        periodID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        ntype: *mut hid_t,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWgeomapinfo(swathID: hid_t, geodim: *mut ::std::os::raw::c_char) -> herr_t;
}
extern "C" {
    pub fn HE5_SWgetfillvalue(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        fillval: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWaliasinfo(
        swathID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliasname: *const ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWinqdfldalias(
        swathID: hid_t,
        fldalias: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWinqgfldalias(
        swathID: hid_t,
        fldalias: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWgetaliaslist(
        swathID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliaslist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWgetdimscale(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: *mut hsize_t,
        numbertype: *mut hid_t,
        databuff: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWdscaleattrinfo(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWdscaleattrinfo2(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWreaddscaleattr(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWinqdscaleattrs(
        swathID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWdefboxregion(
        swathID: hid_t,
        cornerlon: *mut f64,
        cornerlat: *mut f64,
        mode: ::std::os::raw::c_int,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_SWdefvrtregion(
        swathID: hid_t,
        regionID: hid_t,
        vertObj: *mut ::std::os::raw::c_char,
        range: *mut f64,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_SWregionindex(
        swathID: hid_t,
        cornerlon: *mut f64,
        cornerlat: *mut f64,
        mode: ::std::os::raw::c_int,
        geodim: *mut ::std::os::raw::c_char,
        idxrange: *mut hsize_t,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_SWdupregion(oldregionID: hid_t) -> hid_t;
}
extern "C" {
    pub fn HE5_SWdeftimeperiod(
        swathID: hid_t,
        starttime: f64,
        stoptime: f64,
        mode: ::std::os::raw::c_int,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_SWextractregion(
        swathID: hid_t,
        regionID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        externalflag: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWextractperiod(
        swathID: hid_t,
        periodID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        externalflag: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWupdateidxmap(
        swathID: hid_t,
        regionID: hid_t,
        indexin: *mut ::std::os::raw::c_long,
        indexout: *mut ::std::os::raw::c_long,
        indicies: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWupdatescene(swathID: hid_t, regionID: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_SWindexinfo(
        regionID: hid_t,
        object: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        dimlist: *mut ::std::os::raw::c_char,
        indices: *mut *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRdefine(
        swathID: hid_t,
        profilename: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
        datatype_id: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRwrite(
        swathID: hid_t,
        profilename: *const ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        edge: *const hsize_t,
        size: usize,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRread(
        swathID: hid_t,
        profilename: *const ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        edge: *const hsize_t,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRreclaimspace(
        swathID: hid_t,
        profilename: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRinquire(
        swathID: hid_t,
        profnames: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        classID: *mut H5T_class_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_PRinfo(
        swathID: hid_t,
        profname: *const ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        maxdims: *mut hsize_t,
        ntype: *mut hid_t,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRwritegrpattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRreadgrpattr(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRgrpattrinfo(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRgrpattrinfo2(
        swathID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PRinqgrpattrs(
        swathID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_SWsetextdata(
        swathID: hid_t,
        filelist: *const ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_SWgetextdata(
        swathID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        namelength: usize,
        filelist: *mut ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_SWmountexternal(
        swathID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        extfilename: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_SWunmount(swathID: hid_t, fldgroup: ::std::os::raw::c_int, fileID: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_SWreadexternal(
        swathID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        fieldname: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDopen(filename: *const ::std::os::raw::c_char, flags: uintn) -> hid_t;
}
extern "C" {
    pub fn HE5_GDcreate(
        fid: hid_t,
        gridname: *const ::std::os::raw::c_char,
        xdimsize: ::std::os::raw::c_long,
        ydimsize: ::std::os::raw::c_long,
        upleftpt: *mut f64,
        lowrightpt: *mut f64,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_GDattach(fid: hid_t, gridname: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn HE5_GDdetach(gridID: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_GDclose(fid: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdefdim(
        gridID: hid_t,
        dimname: *mut ::std::os::raw::c_char,
        dim: hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdefproj(
        gridID: hid_t,
        projcode: ::std::os::raw::c_int,
        zonecode: ::std::os::raw::c_int,
        spherecode: ::std::os::raw::c_int,
        projparm: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdefcomp(
        gridID: hid_t,
        compcode: ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdeftile(
        gridID: hid_t,
        tilecode: ::std::os::raw::c_int,
        tilerank: ::std::os::raw::c_int,
        tiledims: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdefcomtile(
        gridID: hid_t,
        compcode: ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
        tilerank: ::std::os::raw::c_int,
        tiledims: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdeforigin(gridID: hid_t, origincode: ::std::os::raw::c_int) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdefpixreg(gridID: hid_t, pixregcode: ::std::os::raw::c_int) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdeffield(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
        ntype: hid_t,
        merge: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDsetfillvalue(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        fillval: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDsetalias(
        gridID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        aliaslist: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdropalias(
        gridID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliasname: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDsetdimscale(
        gridID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: hsize_t,
        numbertype: hid_t,
        databuff: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdefdimscale(
        gridID: hid_t,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: hsize_t,
        numbertype: hid_t,
        datbuff: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDwritefieldmeta(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        ntype: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDwritefield(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        edge: *const hsize_t,
        data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDreadfield(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        edge: *const hsize_t,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDwriteattr(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDwritegrpattr(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDwritelocattr(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDreadattr(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDreadgrpattr(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDreadlocattr(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDblkSOMoffset(
        gridID: hid_t,
        offset: *mut ::std::os::raw::c_long,
        count: *mut hsize_t,
        code: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDinqgrid(
        filename: *const ::std::os::raw::c_char,
        gridlist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDdiminfo(gridID: hid_t, dimname: *mut ::std::os::raw::c_char) -> hsize_t;
}
extern "C" {
    pub fn HE5_GDgridinfo(
        gridID: hid_t,
        xdimsize: *mut ::std::os::raw::c_long,
        ydimsize: *mut ::std::os::raw::c_long,
        upleftpt: *mut f64,
        lowrightpt: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDprojinfo(
        gridID: hid_t,
        projcode: *mut ::std::os::raw::c_int,
        zonecode: *mut ::std::os::raw::c_int,
        spherecode: *mut ::std::os::raw::c_int,
        projparm: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDorigininfo(gridID: hid_t, origincode: *mut ::std::os::raw::c_int) -> herr_t;
}
extern "C" {
    pub fn HE5_GDpixreginfo(gridID: hid_t, pixregcode: *mut ::std::os::raw::c_int) -> herr_t;
}
extern "C" {
    pub fn HE5_GDcompinfo(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        compcode: *mut ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDfieldinfo(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        ntype: *mut hid_t,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDregioninfo(
        gridID: hid_t,
        regionID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        size: *mut ::std::os::raw::c_long,
        upleftpt: *mut f64,
        lowrightpt: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDnentries(
        gridID: hid_t,
        entrycode: ::std::os::raw::c_int,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDinqdims(
        gridID: hid_t,
        dimnames: *mut ::std::os::raw::c_char,
        dims: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_GDattrinfo(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDgrpattrinfo(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDlocattrinfo(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDattrinfo2(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDgrpattrinfo2(
        gridID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDlocattrinfo2(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDinqattrs(
        gridID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDinqgrpattrs(
        gridID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDinqlocattrs(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDinqfields(
        gridID: hid_t,
        fieldlist: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        ntype: *mut hid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_GDinqdatatype(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        fieldgroup: ::std::os::raw::c_int,
        dtype: *mut hid_t,
        classid: *mut H5T_class_t,
        order: *mut H5T_order_t,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDgetfillvalue(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        fillval: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDtileinfo(
        gridID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        tilecode: *mut ::std::os::raw::c_int,
        tilerank: *mut ::std::os::raw::c_int,
        tiledims: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDaliasinfo(
        gridID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliasname: *const ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDinqfldalias(
        gridID: hid_t,
        fldalias: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDgetaliaslist(
        gridID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliaslist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDgetdimscale(
        gridID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: *mut hsize_t,
        numbertype: *mut hid_t,
        databuff: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDwritedscaleattr(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        numtype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdscaleattrinfo(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdscaleattrinfo2(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDreaddscaleattr(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDinqdscaleattrs(
        gridID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDdefboxregion(gridID: hid_t, cornerlon: *mut f64, cornerlat: *mut f64) -> hid_t;
}
extern "C" {
    pub fn HE5_GDdefvrtregion(
        gridID: hid_t,
        regionID: hid_t,
        vertObj: *mut ::std::os::raw::c_char,
        range: *mut f64,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_GDdeftimeperiod(
        gridID: hid_t,
        periodID: hid_t,
        starttime: f64,
        stoptime: f64,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_GDextractregion(
        gridID: hid_t,
        regionID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDdupregion(oldregionID: hid_t) -> hid_t;
}
extern "C" {
    pub fn HE5_GDgetpixels(
        gridID: hid_t,
        nLonLat: ::std::os::raw::c_long,
        lonVal: *mut f64,
        latVal: *mut f64,
        pixRow: *mut ::std::os::raw::c_long,
        pixCol: *mut ::std::os::raw::c_long,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDgetpixvalues(
        gridID: hid_t,
        nPixels: ::std::os::raw::c_long,
        pixRow: *mut ::std::os::raw::c_long,
        pixCol: *mut ::std::os::raw::c_long,
        fieldname: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDinterpolate(
        gridID: hid_t,
        nValues: ::std::os::raw::c_long,
        lonVal: *mut f64,
        latVal: *mut f64,
        fieldname: *const ::std::os::raw::c_char,
        interpVal: *mut f64,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_GDij2ll(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: ::std::os::raw::c_long,
        arg10: *mut ::std::os::raw::c_long,
        arg11: *mut ::std::os::raw::c_long,
        arg12: *mut f64,
        arg13: *mut f64,
        arg14: ::std::os::raw::c_int,
        arg15: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDll2ij(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: ::std::os::raw::c_long,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut ::std::os::raw::c_long,
        arg13: *mut ::std::os::raw::c_long,
        arg14: *mut f64,
        arg15: *mut f64,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDrs2ll(
        projcode: ::std::os::raw::c_int,
        projparm: *mut f64,
        xdimsize: ::std::os::raw::c_long,
        ydimsize: ::std::os::raw::c_long,
        upleft: *mut f64,
        lowright: *mut f64,
        npnts: ::std::os::raw::c_int,
        r: *mut f64,
        s: *mut f64,
        longitude: *mut f64,
        latitude: *mut f64,
        pixcen: ::std::os::raw::c_int,
        pixcnr: ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDsetextdata(
        gridID: hid_t,
        filelist: *const ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_GDgetextdata(
        gridID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        namelength: usize,
        filelist: *mut ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_PTopen(filename: *const ::std::os::raw::c_char, flags: uintn) -> hid_t;
}
extern "C" {
    pub fn HE5_PTcreate(fid: hid_t, pointname: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn HE5_PTattach(fid: hid_t, pointname: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn HE5_PTdetach(pointID: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_PTclose(fid: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_PTdeflevel(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
        levelinfo: *mut HE5_CmpDTSinfo,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTdeflinkage(
        pointID: hid_t,
        parent: *mut ::std::os::raw::c_char,
        child: *mut ::std::os::raw::c_char,
        linkfield: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTwritelevel(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        count: *mut hsize_t,
        size: *mut usize,
        data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTupdatelevel(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        fieldlist: *mut ::std::os::raw::c_char,
        nrec: hsize_t,
        recs: *mut hssize_t,
        data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTreadlevel(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        inStruct: *mut HE5_CmpDTSinfo,
        size: *mut usize,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTwriteattr(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTwritegrpattr(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTwritelocattr(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTreadattr(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTreadgrpattr(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTreadlocattr(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTnrecs(pointID: hid_t, level: ::std::os::raw::c_int) -> hsize_t;
}
extern "C" {
    pub fn HE5_PTnlevels(pointID: hid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_PTnfields(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        fieldlist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_PTlevelindx(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_PTgetlevelname(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        levelname: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTbcklinkinfo(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        linkfield: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTfwdlinkinfo(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        linkfield: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTlevelinfo(
        pointID: hid_t,
        level: ::std::os::raw::c_int,
        info: *mut HE5_CmpDTSinfo,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTinqdatatype(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        fieldgroup: ::std::os::raw::c_int,
        dtype: *mut hid_t,
        classid: *mut H5T_class_t,
        order: *mut H5T_order_t,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTinqpoint(
        filename: *const ::std::os::raw::c_char,
        pointlist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_PTgetrecnums(
        pointID: hid_t,
        inlevel: ::std::os::raw::c_int,
        outlevel: ::std::os::raw::c_int,
        inNrec: hsize_t,
        inRecs: *mut hssize_t,
        outNrec: *mut hsize_t,
        outRecs: *mut hssize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTattrinfo(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTgrpattrinfo(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTlocattrinfo(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTattrinfo2(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTgrpattrinfo2(
        pointID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTlocattrinfo2(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_PTinqattrs(
        pointID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_PTinqgrpattrs(
        pointID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_PTinqlocattrs(
        pointID: hid_t,
        levelname: *const ::std::os::raw::c_char,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAopen(filename: *const ::std::os::raw::c_char, flags: uintn) -> hid_t;
}
extern "C" {
    pub fn HE5_ZAcreate(fid: hid_t, zaname: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn HE5_ZAattach(fid: hid_t, zaname: *const ::std::os::raw::c_char) -> hid_t;
}
extern "C" {
    pub fn HE5_ZAdetach(zaID: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAclose(fid: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdefdim(zaID: hid_t, dimname: *mut ::std::os::raw::c_char, dim: hsize_t) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdefine(
        zaID: hid_t,
        za_name: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
        dtype: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdefchunk(zaID: hid_t, ndims: ::std::os::raw::c_int, dim: *const hsize_t)
        -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdefcomp(
        zaID: hid_t,
        compcode: ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdefcomchunk(
        zaID: hid_t,
        compcode: ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
        ndims: ::std::os::raw::c_int,
        dim: *const hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAsetfillvalue(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        ntype: hid_t,
        fillval: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAsetalias(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        aliaslist: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdropalias(
        zaID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliasname: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAfldrename(
        zaID: hid_t,
        oldfieldname: *mut ::std::os::raw::c_char,
        newfieldname: *const ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAsetdimscale(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: hsize_t,
        numbertype: hid_t,
        data: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAgetdimscale(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: *mut hsize_t,
        numbertype: *mut hid_t,
        databuff: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAdefdimscale(
        zaID: hid_t,
        dimname: *mut ::std::os::raw::c_char,
        dimsize: hsize_t,
        numbertype: hid_t,
        datbuff: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAwritedatameta(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        dimlist: *mut ::std::os::raw::c_char,
        mvalue: hid_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAwriteattr(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAwritegrpattr(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAwritelocattr(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAreadattr(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAreadgrpattr(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAreadlocattr(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAwrite(
        zaID: hid_t,
        za_name: *mut ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        count: *const hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAread(
        zaID: hid_t,
        za_name: *mut ::std::os::raw::c_char,
        start: *const hssize_t,
        stride: *const hsize_t,
        count: *const hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAreaddscaleattr(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAwritedscaleattr(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        numtype: hid_t,
        count: *mut hsize_t,
        datbuf: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdiminfo(zaID: hid_t, dimname: *mut ::std::os::raw::c_char) -> hsize_t;
}
extern "C" {
    pub fn HE5_ZAfldsrch(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        fieldID: *mut hid_t,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        typeID: *mut hid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_ZAinfo(
        zaID: hid_t,
        za_name: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
        dtype: *mut hid_t,
        dimlist: *mut ::std::os::raw::c_char,
        maxdimlist: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAcompinfo(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        compcode: *mut ::std::os::raw::c_int,
        compparm: *mut ::std::os::raw::c_int,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAattrinfo(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAgrpattrinfo(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAlocattrinfo(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAattrinfo2(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAgrpattrinfo2(
        zaID: hid_t,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAlocattrinfo2(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAinqdatatype(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        group: ::std::os::raw::c_int,
        dtype: *mut hid_t,
        classid: *mut H5T_class_t,
        order: *mut H5T_order_t,
        size: *mut usize,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAinqdims(
        zaID: hid_t,
        dimnames: *mut ::std::os::raw::c_char,
        dims: *mut hsize_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAinquire(
        zaID: hid_t,
        za_name_list: *mut ::std::os::raw::c_char,
        rank: *mut ::std::os::raw::c_int,
        dtype: *mut hid_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAinqattrs(
        zaID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAinqgrpattrs(
        zaID: hid_t,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAinqlocattrs(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAnentries(
        zaID: hid_t,
        entrycode: ::std::os::raw::c_int,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAinqza(
        filename: *const ::std::os::raw::c_char,
        zalist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAgetfillvalue(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        fillval: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAaliasinfo(
        zaID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliasname: *const ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAinqfldalias(
        zaID: hid_t,
        fldalias: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAchunkinfo(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        ndims: *mut ::std::os::raw::c_int,
        dims: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAgetaliaslist(
        zaID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        aliaslist: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAdscaleattrinfo(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAdscaleattrinfo2(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        ntype: *mut hid_t,
        count: *mut hsize_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAinqdscaleattrs(
        zaID: hid_t,
        fieldname: *const ::std::os::raw::c_char,
        attrnames: *mut ::std::os::raw::c_char,
        strbufsize: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn HE5_ZAsetextdata(
        zaID: hid_t,
        filelist: *const ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAgetextdata(
        zaID: hid_t,
        fieldname: *mut ::std::os::raw::c_char,
        namelength: usize,
        filelist: *mut ::std::os::raw::c_char,
        offset: *mut off_t,
        size: *mut hsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn HE5_ZAmountexternal(
        zaID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        extfilename: *const ::std::os::raw::c_char,
    ) -> hid_t;
}
extern "C" {
    pub fn HE5_ZAunmount(zaID: hid_t, fldgroup: ::std::os::raw::c_int, fileID: hid_t) -> herr_t;
}
extern "C" {
    pub fn HE5_ZAreadexternal(
        zaID: hid_t,
        fldgroup: ::std::os::raw::c_int,
        fieldname: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_void,
    ) -> herr_t;
}
extern "C" {
    #[doc = "Function prototypes."]
    pub fn stplnfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stplninv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stplnforint(
        zone: ::std::os::raw::c_long,
        sphere: ::std::os::raw::c_long,
        fn27: *mut ::std::os::raw::c_char,
        fn83: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stplninvint(
        zone: ::std::os::raw::c_long,
        sphere: ::std::os::raw::c_long,
        fn27: *mut ::std::os::raw::c_char,
        fn83: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alberfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alberinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alberforint(
        r_maj: f64,
        r_min: f64,
        lat1: f64,
        lat2: f64,
        lon0: f64,
        lat0: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alberinvint(
        r_maj: f64,
        r_min: f64,
        lat1: f64,
        lat2: f64,
        lon0: f64,
        lat0: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamccfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamccinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamccforint(
        r_maj: f64,
        r_min: f64,
        lat1: f64,
        lat2: f64,
        c_lon: f64,
        c_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamccinvint(
        r_maj: f64,
        r_min: f64,
        lat1: f64,
        lat2: f64,
        c_lon: f64,
        c_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn merfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn merinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn merforint(
        r_maj: f64,
        r_min: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn merinvint(
        r_maj: f64,
        r_min: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psforint(
        r_maj: f64,
        r_min: f64,
        c_lon: f64,
        c_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psinvint(
        r_maj: f64,
        r_min: f64,
        c_lon: f64,
        c_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyforint(
        r_maj: f64,
        r_min: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyinvint(
        r_maj: f64,
        r_min: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqconfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqconinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqconforint(
        r_maj: f64,
        r_min: f64,
        lat1: f64,
        lat2: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
        mode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eqconinvint(
        r_maj: f64,
        r_min: f64,
        lat1: f64,
        lat2: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
        mode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tminv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmforint(
        r_maj: f64,
        r_min: f64,
        scale_fact: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tminvint(
        r_maj: f64,
        r_min: f64,
        scale_fact: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sterfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sterinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sterforint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sterinvint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamazfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamazinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamazforint(
        r: f64,
        center_long: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lamazinvint(
        r: f64,
        center_long: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn azimfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aziminv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn azimforint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aziminvint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnomfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnominv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnomforint(
        r: f64,
        center_long: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnominvint(
        r: f64,
        center_long: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn orthfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn orthinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn orthforint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn orthinvint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gvnspfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gvnspinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gvnspforint(
        r: f64,
        h: f64,
        center_long: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gvnspinvint(
        r: f64,
        h: f64,
        center_long: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sinfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sininv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sinforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sininvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn equifor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn equiinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn equiforint(
        r_maj: f64,
        center_lon: f64,
        lat1: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn equiinvint(
        r_maj: f64,
        center_lon: f64,
        lat1: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn millfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn millinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn millforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn millinvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vandgfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vandginv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vandgforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vandginvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omerfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omerinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omerforint(
        r_maj: f64,
        r_min: f64,
        scale_fact: f64,
        azimuth: f64,
        lon_orig: f64,
        lat_orig: f64,
        false_east: f64,
        false_north: f64,
        lon1: f64,
        lat1: f64,
        lon2: f64,
        lat2: f64,
        mode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omerinvint(
        r_maj: f64,
        r_min: f64,
        scale_fact: f64,
        azimuth: f64,
        lon_orig: f64,
        lat_orig: f64,
        false_east: f64,
        false_north: f64,
        lon1: f64,
        lat1: f64,
        lon2: f64,
        lat2: f64,
        mode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn somfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sominv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn somforint(
        r_major: f64,
        r_minor: f64,
        satnum: ::std::os::raw::c_long,
        path: ::std::os::raw::c_long,
        alf_in: f64,
        lon: f64,
        false_east: f64,
        false_north: f64,
        time: f64,
        start1: ::std::os::raw::c_long,
        flag: ::std::os::raw::c_long,
        sat_ratio: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sominvint(
        r_major: f64,
        r_minor: f64,
        satnum: ::std::os::raw::c_long,
        path: ::std::os::raw::c_long,
        alf_in: f64,
        lon: f64,
        false_east: f64,
        false_north: f64,
        time: f64,
        start1: ::std::os::raw::c_long,
        flag: ::std::os::raw::c_long,
        sat_ratio: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hamfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn haminv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hamforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn haminvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn robfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn robinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn robforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn robinvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goodfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goodinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goodforint(r: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goodinvint(r: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn molwfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn molwinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn molwforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn molwinvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imolwfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imolwinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imolwforint(r: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imolwinvint(r: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alconfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alconinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alconforint(
        r_maj: f64,
        r_min: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alconinvint(
        r_maj: f64,
        r_min: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wivfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wivinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wivforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wivinvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wviifor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wviiinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wviiforint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wviiinvint(
        r: f64,
        center_long: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obleqfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obleqinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obleqforint(
        r: f64,
        center_long: f64,
        center_lat: f64,
        shape_m: f64,
        shape_n: f64,
        angle: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obleqinvint(
        r: f64,
        center_long: f64,
        center_lat: f64,
        shape_m: f64,
        shape_n: f64,
        angle: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinusfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinusinv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinusforinit(
        sphere: f64,
        lon_cen_mer: f64,
        false_east: f64,
        false_north: f64,
        dzone: f64,
        djustify: f64,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn isinusinvinit(
        sphere: f64,
        lon_cen_mer: f64,
        false_east: f64,
        false_north: f64,
        dzone: f64,
        djustify: f64,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn utmfor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utminv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utmforint(
        r_maj: f64,
        r_min: f64,
        scale_fact: f64,
        zone: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utminvint(
        r_maj: f64,
        r_min: f64,
        scale_fact: f64,
        zone: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn calc_utm_zone(lon: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn bceaforint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bceafor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bceainvint(
        r_maj: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bceainv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ceaforint(
        r_maj: f64,
        r_min: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ceafor(lon: f64, lat: f64, x: *mut f64, y: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ceainvint(
        r_maj: f64,
        r_min: f64,
        center_lon: f64,
        center_lat: f64,
        false_east: f64,
        false_north: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ceainv(x: f64, y: f64, lon: *mut f64, lat: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn p_error(what: *mut ::std::os::raw::c_char, where_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn ptitle(A: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tsincos(val: f64, sin_val: *mut f64, cos_val: *mut f64);
}
extern "C" {
    pub fn msfnz(eccent: f64, sinphi: f64, cosphi: f64) -> f64;
}
extern "C" {
    pub fn qsfnz(eccent: f64, sinphi: f64, cosphi: f64) -> f64;
}
extern "C" {
    pub fn tsfnz(eccent: f64, phi: f64, sinphi: f64) -> f64;
}
extern "C" {
    pub fn radius2(A: f64, B: f64);
}
extern "C" {
    pub fn radius(A: f64);
}
extern "C" {
    pub fn stanparl(A: f64, B: f64);
}
extern "C" {
    pub fn cenlonmer(A: f64);
}
extern "C" {
    pub fn cenlon(A: f64);
}
extern "C" {
    pub fn cenlat(A: f64);
}
extern "C" {
    pub fn origin(A: f64);
}
extern "C" {
    pub fn offsetp(A: f64, B: f64);
}
extern "C" {
    pub fn adjust_lon(x: f64) -> f64;
}
extern "C" {
    pub fn phi1z(eccent: f64, qs: f64, flag: *mut ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn phi2z(eccent: f64, ts: f64, flag: *mut ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn phi3z(
        ml: f64,
        e0: f64,
        e1: f64,
        e2: f64,
        e3: f64,
        flag: *mut ::std::os::raw::c_long,
    ) -> f64;
}
extern "C" {
    pub fn phi4z(
        eccent: f64,
        e0: f64,
        e1: f64,
        e2: f64,
        e3: f64,
        a: f64,
        b: f64,
        c: *mut f64,
        phi: *mut f64,
    ) -> f64;
}
extern "C" {
    pub fn asinz(con: f64) -> f64;
}
extern "C" {
    pub fn sign(x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn e0fn(x: f64) -> f64;
}
extern "C" {
    pub fn e1fn(x: f64) -> f64;
}
extern "C" {
    pub fn e2fn(x: f64) -> f64;
}
extern "C" {
    pub fn e3fn(x: f64) -> f64;
}
extern "C" {
    pub fn e4fn(x: f64) -> f64;
}
extern "C" {
    pub fn mlfn(e0: f64, e1: f64, e2: f64, e3: f64, phi: f64) -> f64;
}
extern "C" {
    pub fn paksz(ang: f64, iflg: *mut ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn pakcz(pak: f64) -> f64;
}
extern "C" {
    pub fn stparl1(A: f64);
}
extern "C" {
    pub fn genrpt(A: f64, S: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn genrpt_long(A: ::std::os::raw::c_long, S: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn pblank();
}
extern "C" {
    pub fn for_init(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        c: *mut f64,
        d: ::std::os::raw::c_int,
        str1: *mut ::std::os::raw::c_char,
        str2: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
        func: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: f64,
                arg2: f64,
                arg3: *mut f64,
                arg4: *mut f64,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn inv_init(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        c: *mut f64,
        d: ::std::os::raw::c_int,
        str1: *mut ::std::os::raw::c_char,
        str2: *mut ::std::os::raw::c_char,
        e: *mut ::std::os::raw::c_int,
        func: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: f64,
                arg2: f64,
                arg3: *mut f64,
                arg4: *mut f64,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
